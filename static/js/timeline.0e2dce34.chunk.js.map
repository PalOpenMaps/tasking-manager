{"version":3,"sources":["utils/formatChartJSData.js","hooks/UseTimeDiff.js","utils/chart.js","../node_modules/date-fns/esm/differenceInDays/index.js","components/projectDetail/timeline.js"],"names":["formatChartData","reference","stats","data","datasets","backgroundColor","labels","map","f","field","total","reduce","a","b","v","Math","round","borderColor","label","formatTimelineData","mappedTasksConfig","validatedTasksConfig","mapped","color","fill","validated","entry","date","cumulative_mapped","total_tasks","cumulative_validated","formatTasksStatsData","formatTooltip","context","dataset","dataIndex","concat","formatTimelineTooltip","isPercent","useTimeDiff","tasksByDay","unit","setUnit","useState","useEffect","length","timeDiff","Date","xAxisTimeSeries","type","adapters","locale","enUS","time","tooltipFormat","formatLong","ticks","source","callback","value","index","formatISO","representation","compareLocalAsc","dateLeft","dateRight","diff","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","differenceInDays","dirtyDateLeft","dirtyDateRight","requiredArgs","arguments","toDate","sign","difference","abs","differenceInCalendarDays","setDate","result","Number","ProjectTimeline","_ref","intl","useIntl","CHART_COLOURS","orange","formatMessage","messages","mappedTasks","red","validatedTasks","_jsx","Line","options","plugins","legend","position","align","boxWidth","tooltip","callbacks","scales","y","beginAtZero","x","ChartJS","register","LineElement","PointElement","LinearScale","CategoryScale","TimeSeriesScale","Legend","Tooltip"],"mappings":"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","file":"static/js/timeline.0e2dce34.chunk.js","sourcesContent":["export const formatChartData = (reference, stats) => {\n  let data = { datasets: [{ data: [], backgroundColor: [] }], labels: [] };\n\n  data.datasets[0].data = reference.map((f) => stats[f.field]);\n  const total = data.datasets[0].data.reduce((a, b) => a + b, 0);\n  data.datasets[0].data = data.datasets[0].data.map((v) => Math.round((v / total) * 100));\n  data.datasets[0].backgroundColor = reference.map((f) => f.backgroundColor);\n  data.datasets[0].borderColor = reference.map((f) => f.borderColor);\n  data.labels = reference.map((f) => f.label);\n\n  return data;\n};\n\nexport const formatTimelineData = (stats, mappedTasksConfig, validatedTasksConfig) => {\n  let mapped = {\n    data: [],\n    backgroundColor: mappedTasksConfig.color,\n    borderColor: mappedTasksConfig.color,\n    fill: false,\n    label: mappedTasksConfig.label,\n  };\n  let validated = {\n    data: [],\n    backgroundColor: validatedTasksConfig.color,\n    borderColor: validatedTasksConfig.color,\n    fill: false,\n    label: validatedTasksConfig.label,\n  };\n\n  const labels = stats.map((entry) => entry.date);\n  mapped.data = stats.map((entry) =>\n    Math.round((entry.cumulative_mapped / entry.total_tasks) * 100),\n  );\n  validated.data = stats.map((entry) =>\n    Math.round((entry.cumulative_validated / entry.total_tasks) * 100),\n  );\n\n  return { datasets: [validated, mapped], labels: labels };\n};\n\nexport const formatTasksStatsData = (stats, mappedTasksConfig, validatedTasksConfig) => {\n  let mapped = {\n    data: [],\n    backgroundColor: mappedTasksConfig.color,\n    label: mappedTasksConfig.label,\n  };\n  let validated = {\n    data: [],\n    backgroundColor: validatedTasksConfig.color,\n    label: validatedTasksConfig.label,\n  };\n\n  const labels = stats.map((entry) => entry.date);\n  mapped.data = stats.map((entry) => entry.mapped);\n  validated.data = stats.map((entry) => entry.validated);\n\n  return { datasets: [mapped, validated], labels: labels };\n};\n\nexport const formatTooltip = (context) => {\n  var label = context.label;\n  if (label) label += ': ';\n  label += context.dataset.data[context.dataIndex];\n\n  return `${label}%`;\n};\n\nexport const formatTimelineTooltip = (context, isPercent) => {\n  var label = context.dataset.label || '';\n  if (label) label += ': ';\n  label += context.dataset.data[context.dataIndex];\n\n  return `${label}${isPercent ? '%' : ''}`;\n};\n","import { useState, useEffect } from 'react';\n\nexport function useTimeDiff(tasksByDay) {\n  const [unit, setUnit] = useState('day');\n  const day = 86400000;\n  useEffect(() => {\n    if (tasksByDay && tasksByDay.length >= 2) {\n      const timeDiff =\n        (new Date(tasksByDay[tasksByDay.length - 1].date) - new Date(tasksByDay[0].date)) / day;\n      if (timeDiff > 16 * 7) {\n        setUnit('month');\n      } else if (timeDiff > 16) {\n        setUnit('week');\n      }\n    }\n  }, [tasksByDay]);\n  return unit;\n}\n","import { enUS } from 'date-fns/locale';\nimport { formatISO } from 'date-fns';\n/**\n * x axis configuration common between this and {@link ../projectDetail/timeline.js}\n * @param unit The base unit for the axis\n * @typedef {import('chart.js').ScaleOptionsByType} ScaleOptionsByType\n * @returns {ScaleOptionsByType} The options to use for x axis configuration\n */\nfunction xAxisTimeSeries(unit) {\n  return {\n    type: 'timeseries',\n    adapters: { date: { locale: enUS } },\n    time: {\n      unit: unit,\n      tooltipFormat: enUS.formatLong.date,\n    },\n    ticks: {\n      source: 'labels',\n      callback: (value, index, ticks) => formatISO(ticks[index].value, { representation: 'date' }),\n    },\n  };\n}\n\nexport { xAxisTimeSeries };\n","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}","import React from 'react';\nimport {\n  Chart as ChartJS,\n  LineElement,\n  PointElement,\n  LinearScale,\n  CategoryScale,\n  TimeSeriesScale,\n  Legend,\n  Tooltip,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\nimport { formatTimelineData, formatTimelineTooltip } from '../../utils/formatChartJSData';\nimport { CHART_COLOURS } from '../../config';\nimport { useTimeDiff } from '../../hooks/UseTimeDiff';\nimport { xAxisTimeSeries } from '../../utils/chart';\n\nChartJS.register(\n  LineElement,\n  PointElement,\n  LinearScale,\n  CategoryScale,\n  TimeSeriesScale,\n  Legend,\n  Tooltip,\n);\n\nexport default function ProjectTimeline({ tasksByDay }: Object) {\n  const intl = useIntl();\n  const unit = useTimeDiff(tasksByDay);\n  const mappedTasksConfig = {\n    color: CHART_COLOURS.orange,\n    label: intl.formatMessage(messages.mappedTasks),\n  };\n  const validatedTasksConfig = {\n    color: CHART_COLOURS.red,\n    label: intl.formatMessage(messages.validatedTasks),\n  };\n\n  return (\n    <Line\n      data={formatTimelineData(tasksByDay, mappedTasksConfig, validatedTasksConfig)}\n      options={{\n        plugins: {\n          legend: { position: 'top', align: 'end', labels: { boxWidth: 12 } },\n          tooltip: {\n            callbacks: { label: (context) => formatTimelineTooltip(context, true) },\n          },\n        },\n        scales: {\n          y: { ticks: { beginAtZero: true } },\n          x: { ...xAxisTimeSeries(unit) },\n        },\n      }}\n    />\n  );\n}\n"],"sourceRoot":""}