{"version":3,"sources":["../node_modules/date-fns/esm/differenceInMilliseconds/index.js","../node_modules/date-fns/esm/_lib/roundingMethods/index.js","../node_modules/date-fns/esm/compareAsc/index.js","../node_modules/date-fns/esm/differenceInMonths/index.js","../node_modules/date-fns/esm/isLastDayOfMonth/index.js","../node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js","../node_modules/date-fns/esm/addSeconds/index.js","../node_modules/date-fns/esm/differenceInSeconds/index.js","../node_modules/date-fns/esm/differenceInMinutes/index.js","../node_modules/date-fns/esm/differenceInHours/index.js","../node_modules/date-fns/esm/differenceInWeeks/index.js","../node_modules/date-fns/esm/differenceInQuarters/index.js","../node_modules/date-fns/esm/differenceInYears/index.js","../node_modules/date-fns/esm/startOfSecond/index.js","../node_modules/date-fns/esm/startOfMinute/index.js","../node_modules/date-fns/esm/startOfHour/index.js","../node_modules/date-fns/esm/endOfSecond/index.js","../node_modules/date-fns/esm/endOfMinute/index.js","../node_modules/date-fns/esm/endOfHour/index.js","../node_modules/date-fns/esm/endOfQuarter/index.js","../node_modules/date-fns/esm/formatISO/index.js"],"names":["differenceInMilliseconds","dateLeft","dateRight","requiredArgs","arguments","toDate","getTime","roundingMap","ceil","Math","round","floor","trunc","value","defaultRoundingMethod","getRoundingMethod","method","compareAsc","dirtyDateLeft","dirtyDateRight","diff","differenceInMonths","result","sign","difference","abs","differenceInCalendarMonths","getMonth","getDate","setDate","setMonth","isLastMonthNotFull","dirtyDate","date","endOfDay","endOfMonth","isLastDayOfMonth","Number","FORMATS","datetime","millisecond","second","minute","hour","day","week","month","quarter","year","_adapters","_date","override","_id","formats","parse","fmt","type","Date","this","options","parseISO","isValid","format","time","add","amount","unit","addMilliseconds","dirtyAmount","toInteger","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","max","min","roundingMethod","differenceInSeconds","millisecondsInMinute","differenceInMinutes","millisecondsInHour","differenceInHours","differenceInDays","differenceInWeeks","differenceInQuarters","differenceInCalendarYears","setFullYear","isLastYearNotFull","differenceInYears","startOf","weekday","setMilliseconds","startOfSecond","setSeconds","startOfMinute","setMinutes","startOfHour","startOfDay","startOfWeek","weekStartsOn","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfWeek","currentMonth","setHours","endOfQuarter","endOfYear","formatISO","_options$format","_options$representati","originalDate","isNaN","RangeError","String","representation","tzOffset","dateDelimiter","timeDelimiter","addLeadingZeros","getFullYear","concat","offset","getTimezoneOffset","absoluteOffset","hourOffset","minuteOffset","separator","getHours","getMinutes","getSeconds","join"],"mappings":"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","file":"static/js/6.2e2928e0.chunk.js","sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n};\n\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","/*!\n * chartjs-adapter-date-fns v3.0.0\n * https://www.chartjs.org\n * (c) 2022 chartjs-adapter-date-fns Contributors\n * Released under the MIT license\n */\nimport { _adapters } from 'chart.js';\nimport { toDate, parse, parseISO, isValid, format, addYears, addQuarters, addMonths, addWeeks, addDays, addHours, addMinutes, addSeconds, addMilliseconds, differenceInYears, differenceInQuarters, differenceInMonths, differenceInWeeks, differenceInDays, differenceInHours, differenceInMinutes, differenceInSeconds, differenceInMilliseconds, startOfYear, startOfQuarter, startOfMonth, startOfWeek, startOfDay, startOfHour, startOfMinute, startOfSecond, endOfYear, endOfQuarter, endOfMonth, endOfWeek, endOfDay, endOfHour, endOfMinute, endOfSecond } from 'date-fns';\n\nconst FORMATS = {\n  datetime: 'MMM d, yyyy, h:mm:ss aaaa',\n  millisecond: 'h:mm:ss.SSS aaaa',\n  second: 'h:mm:ss aaaa',\n  minute: 'h:mm aaaa',\n  hour: 'ha',\n  day: 'MMM d',\n  week: 'PP',\n  month: 'MMM yyyy',\n  quarter: 'qqq - yyyy',\n  year: 'yyyy'\n};\n\n_adapters._date.override({\n  _id: 'date-fns', // DEBUG\n\n  formats: function() {\n    return FORMATS;\n  },\n\n  parse: function(value, fmt) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n    const type = typeof value;\n    if (type === 'number' || value instanceof Date) {\n      value = toDate(value);\n    } else if (type === 'string') {\n      if (typeof fmt === 'string') {\n        value = parse(value, fmt, new Date(), this.options);\n      } else {\n        value = parseISO(value, this.options);\n      }\n    }\n    return isValid(value) ? value.getTime() : null;\n  },\n\n  format: function(time, fmt) {\n    return format(time, fmt, this.options);\n  },\n\n  add: function(time, amount, unit) {\n    switch (unit) {\n    case 'millisecond': return addMilliseconds(time, amount);\n    case 'second': return addSeconds(time, amount);\n    case 'minute': return addMinutes(time, amount);\n    case 'hour': return addHours(time, amount);\n    case 'day': return addDays(time, amount);\n    case 'week': return addWeeks(time, amount);\n    case 'month': return addMonths(time, amount);\n    case 'quarter': return addQuarters(time, amount);\n    case 'year': return addYears(time, amount);\n    default: return time;\n    }\n  },\n\n  diff: function(max, min, unit) {\n    switch (unit) {\n    case 'millisecond': return differenceInMilliseconds(max, min);\n    case 'second': return differenceInSeconds(max, min);\n    case 'minute': return differenceInMinutes(max, min);\n    case 'hour': return differenceInHours(max, min);\n    case 'day': return differenceInDays(max, min);\n    case 'week': return differenceInWeeks(max, min);\n    case 'month': return differenceInMonths(max, min);\n    case 'quarter': return differenceInQuarters(max, min);\n    case 'year': return differenceInYears(max, min);\n    default: return 0;\n    }\n  },\n\n  startOf: function(time, unit, weekday) {\n    switch (unit) {\n    case 'second': return startOfSecond(time);\n    case 'minute': return startOfMinute(time);\n    case 'hour': return startOfHour(time);\n    case 'day': return startOfDay(time);\n    case 'week': return startOfWeek(time);\n    case 'isoWeek': return startOfWeek(time, {weekStartsOn: +weekday});\n    case 'month': return startOfMonth(time);\n    case 'quarter': return startOfQuarter(time);\n    case 'year': return startOfYear(time);\n    default: return time;\n    }\n  },\n\n  endOf: function(time, unit) {\n    switch (unit) {\n    case 'second': return endOfSecond(time);\n    case 'minute': return endOfMinute(time);\n    case 'hour': return endOfHour(time);\n    case 'day': return endOfDay(time);\n    case 'week': return endOfWeek(time);\n    case 'month': return endOfMonth(time);\n    case 'quarter': return endOfQuarter(time);\n    case 'year': return endOfYear(time);\n    default: return time;\n    }\n  }\n});\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInDays from \"../differenceInDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\nexport default function differenceInWeeks(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInDays(dateLeft, dateRight) / 7;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInMonths from \"../differenceInMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of quarters between the given dates.\n *\n * @description\n * Get the number of quarters between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\nexport default function differenceInQuarters(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMonths(dateLeft, dateRight) / 3;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));\n\n  // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584);\n\n  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull));\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\nexport default function startOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\nexport default function startOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\nexport default function endOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\nexport default function endOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\nexport default function endOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport default function endOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.\n * @returns {String} the formatted date string (in local time zone)\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport default function formatISO(date, options) {\n  var _options$format, _options$representati;\n  requiredArgs(1, arguments);\n  var originalDate = toDate(date);\n  if (isNaN(originalDate.getTime())) {\n    throw new RangeError('Invalid time value');\n  }\n  var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');\n  var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : '';\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    var separator = result === '' ? '' : 'T';\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    var time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n  return result;\n}"],"sourceRoot":""}