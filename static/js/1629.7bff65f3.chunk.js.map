{"version":3,"sources":["components/editor.js"],"names":["Editor","_ref","setDisable","comment","presets","imagery","gpxUrl","dispatch","useDispatch","intl","useIntl","session","useSelector","state","auth","iDContext","editor","context","locale","preferences","customImageryIsSet","setCustomImageryIsSet","useState","windowInit","window","customSource","background","findSource","useEffect","startsWith","baseLayerSource","template","iD","prefs","imagerySource","type","coreContext","defaultChangesetComment","length","presetManager","addablePresetIDs","e","embed","assetPath","setsDocumentTitle","containerNode","document","getElementById","undefined","ui","reset","restart","init","fetch","then","response","text","data","gpxData","DOMParser","parseFromString","nameNode","getElementsByTagName","childNodes","projectId","textContent","match","formatMessage","messages","gpxNameAttribute","layers","layer","geojson","gpx","catch","error","console","osm","connection","url","OSM_SERVER_URL","client_id","OSM_CLIENT_ID","client_secret","OSM_CLIENT_SECRET","redirect_uri","OSM_REDIRECT_URI","access_token","osm_oauth_token","switch","thereAreChanges","changes","modified","created","deleted","history","on","_jsx","className","id"],"mappings":"8IAAA,8HAUe,SAASA,EAAMC,GAAqD,IAApD,WAAEC,EAAU,QAAEC,EAAO,QAAEC,EAAO,QAAEC,EAAO,OAAEC,GAAQL,EAC9E,MAAMM,EAAWC,cACXC,EAAOC,cACPC,EAAUC,aAAaC,GAAUA,EAAMC,KAAKH,UAC5CI,EAAYH,aAAaC,GAAUA,EAAMG,OAAOC,UAChDC,EAASN,aAAaC,GAAUA,EAAMM,YAAYD,UACjDE,EAAoBC,GAAyBC,oBAAS,GACvDC,EAA+B,qBAAXC,OACpBC,EACJV,GAAaA,EAAUW,cAAgBX,EAAUW,aAAaC,WAAW,UAoG3E,OAlGAC,qBAAU,KACR,IAAKR,GAAsBf,GAAWoB,EACpC,GAAIpB,EAAQwB,WAAW,QACrBd,EAAUW,aAAaI,gBAAgBL,EAAaM,SAAS1B,IAC7DgB,GAAsB,GAEtBG,OAAOQ,GAAGC,MAAM,6BAA8B5B,OACzC,CACL,MAAM6B,EAAgBnB,EAAUW,aAAaC,WAAWtB,GACpD6B,GACFnB,EAAUW,aAAaI,gBAAgBI,EAE3C,CACF,GACC,CAACd,EAAoBf,EAASU,EAAWU,IAE5CG,qBAAU,KACJL,GACgB,OAAdR,GAGFR,EAAS,CAAE4B,KAAM,aAAclB,QAASO,OAAOQ,GAAGI,eAEtD,GACC,CAACb,EAAYR,EAAWR,IAE3BqB,qBAAU,KACJb,GAAaZ,GACfY,EAAUsB,wBAAwBlC,EACpC,GACC,CAACA,EAASY,IAEba,qBAAU,KACR,GAAIjB,GAAWO,GAAUc,GAAMjB,EAAW,CAExC,IACMX,EAAQkC,OACVd,OAAOQ,GAAGO,cAAcC,iBAAiBpC,GAEzCoB,OAAOQ,GAAGO,cAAcC,iBAAiB,KAE7C,CAAE,MAAOC,GACPjB,OAAOQ,GAAGO,cAAcC,iBAAiB,KAC3C,CAEAzB,EACG2B,OAAM,GACNC,UAAU,eACVzB,OAAOA,GACP0B,mBAAkB,GAClBC,cAAcC,SAASC,eAAe,sBAElBC,IAAnBjC,EAAUkC,MACZlC,EAAUmC,QACVnC,EAAUkC,KAAKE,WAEfpC,EAAUqC,OAER9C,GACF+C,MAAM/C,GACHgD,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,IACL,IAAIC,GAAU,IAAIC,WAAYC,gBAAgBH,EAAM,YAChDI,EAAWH,EAAQI,qBAAqB,OAAO,GAAGC,WAAW,GAC7DC,EAAYH,EAASI,YAAYC,MAAM,QAC3CL,EAASI,YAAcxD,EAAK0D,cAAcC,IAASC,iBAAkB,CACnEL,UAAWA,EAAU,KAEvBjD,EAAUuD,SAASC,MAAM,QAAQC,QAAQC,cAAIf,GAAS,IAEvDgB,OAAOC,IACNC,QAAQD,MAAM,yBAAyB,IAI7C,IAAIE,EAAM9D,EAAU+D,aACpB,IAAIhE,EAAO,CACTiE,IAAKC,IACLC,UAAWC,IACXC,cAAeC,IACfC,aAAcC,IACdC,aAAc5E,EAAQ6E,iBAExBX,EAAIY,OAAO3E,GAEX,MAAM4E,EAAmBC,GACvBA,EAAQC,SAAStD,QAAUqD,EAAQE,QAAQvD,QAAUqD,EAAQG,QAAQxD,OAEvEvB,EAAUgF,UAAUC,GAAG,UAAU,KAC3BN,EAAgB3E,EAAUgF,UAAUJ,WACtCzF,GAAW,GAEXA,GAAW,EACb,GAEJ,IACC,CAACS,EAASI,EAAWb,EAAYE,EAASc,EAAQZ,EAAQG,IAEtDwF,cAAA,OAAKC,UAAU,uBAAuBC,GAAG,gBAClD,C","file":"static/js/1629.7bff65f3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { gpx } from '@tmcw/togeojson';\nimport * as iD from '@hotosm/id';\nimport '@hotosm/id/dist/iD.css';\n\nimport { OSM_CLIENT_ID, OSM_CLIENT_SECRET, OSM_REDIRECT_URI, OSM_SERVER_URL } from '../config';\nimport messages from './messages';\n\nexport default function Editor({ setDisable, comment, presets, imagery, gpxUrl }) {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const session = useSelector((state) => state.auth.session);\n  const iDContext = useSelector((state) => state.editor.context);\n  const locale = useSelector((state) => state.preferences.locale);\n  const [customImageryIsSet, setCustomImageryIsSet] = useState(false);\n  const windowInit = typeof window !== 'undefined';\n  const customSource =\n    iDContext && iDContext.background() && iDContext.background().findSource('custom');\n\n  useEffect(() => {\n    if (!customImageryIsSet && imagery && customSource) {\n      if (imagery.startsWith('http')) {\n        iDContext.background().baseLayerSource(customSource.template(imagery));\n        setCustomImageryIsSet(true);\n        // this line is needed to update the value on the custom background dialog\n        window.iD.prefs('background-custom-template', imagery);\n      } else {\n        const imagerySource = iDContext.background().findSource(imagery);\n        if (imagerySource) {\n          iDContext.background().baseLayerSource(imagerySource);\n        }\n      }\n    }\n  }, [customImageryIsSet, imagery, iDContext, customSource]);\n\n  useEffect(() => {\n    if (windowInit) {\n      if (iDContext === null) {\n        // we need to keep iD context on redux store because iD works better if\n        // the context is not restarted while running in the same browser session\n        dispatch({ type: 'SET_EDITOR', context: window.iD.coreContext() });\n      }\n    }\n  }, [windowInit, iDContext, dispatch]);\n\n  useEffect(() => {\n    if (iDContext && comment) {\n      iDContext.defaultChangesetComment(comment);\n    }\n  }, [comment, iDContext]);\n\n  useEffect(() => {\n    if (session && locale && iD && iDContext) {\n      // if presets is not a populated list we need to set it as null\n      try {\n        if (presets.length) {\n          window.iD.presetManager.addablePresetIDs(presets);\n        } else {\n          window.iD.presetManager.addablePresetIDs(null);\n        }\n      } catch (e) {\n        window.iD.presetManager.addablePresetIDs(null);\n      }\n      // setup the context\n      iDContext\n        .embed(true)\n        .assetPath('/static/id/')\n        .locale(locale)\n        .setsDocumentTitle(false)\n        .containerNode(document.getElementById('id-container'));\n      // init the ui or restart if it was loaded previously\n      if (iDContext.ui() !== undefined) {\n        iDContext.reset();\n        iDContext.ui().restart();\n      } else {\n        iDContext.init();\n      }\n      if (gpxUrl) {\n        fetch(gpxUrl)\n          .then((response) => response.text())\n          .then((data) => {\n            let gpxData = new DOMParser().parseFromString(data, 'text/xml');\n            let nameNode = gpxData.getElementsByTagName('trk')[0].childNodes[0];\n            let projectId = nameNode.textContent.match(/\\d+/g);\n            nameNode.textContent = intl.formatMessage(messages.gpxNameAttribute, {\n              projectId: projectId[0],\n            });\n            iDContext.layers().layer('data').geojson(gpx(gpxData));\n          })\n          .catch((error) => {\n            console.error('Error loading GPX data');\n          });\n      }\n\n      let osm = iDContext.connection();\n      var auth = {\n        url: OSM_SERVER_URL,\n        client_id: OSM_CLIENT_ID,\n        client_secret: OSM_CLIENT_SECRET,\n        redirect_uri: OSM_REDIRECT_URI,\n        access_token: session.osm_oauth_token,\n      };\n      osm.switch(auth);\n\n      const thereAreChanges = (changes) =>\n        changes.modified.length || changes.created.length || changes.deleted.length;\n\n      iDContext.history().on('change', () => {\n        if (thereAreChanges(iDContext.history().changes())) {\n          setDisable(true);\n        } else {\n          setDisable(false);\n        }\n      });\n    }\n  }, [session, iDContext, setDisable, presets, locale, gpxUrl, intl]);\n\n  return <div className=\"w-100 vh-minus-69-ns\" id=\"id-container\"></div>;\n}\n"],"sourceRoot":""}