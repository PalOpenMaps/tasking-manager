{"version":3,"sources":["components/projectStats/taskStatus.js"],"names":["injectIntl","props","getLabel","status","intl","formatMessage","statusMessages","concat","reference","label","field","backgroundColor","TASK_COLOURS","INVALIDATED","borderColor","READY","LOCKED_FOR_MAPPING","MAPPED","LOCKED_FOR_VALIDATION","VALIDATED","BADIMAGERY","data","formatChartData","stats","React","createElement","className","FormattedMessage","messages","Doughnut","options","legend","position","labels","boxWidth","tooltips","callbacks","tooltip","formatTooltip","map","n","StatsCardContent","key","value"],"mappings":"0IAAA,4FAwFeA,sBA9EQC,IACrB,MAAMC,EAAYC,GAAWF,EAAMG,KAAKC,cAAcC,IAAe,cAADC,OAAeJ,KAEnF,IAAIK,EAAY,CACd,CACEC,MAAOP,EAAS,eAChBQ,MAAO,cACPC,gBAAiBC,IAAaC,YAC9BC,YAAaF,IAAaC,aAE5B,CACEJ,MAAOP,EAAS,SAChBQ,MAAO,QACPC,gBAAiBC,IAAaG,OAEhC,CACEN,MAAOP,EAAS,sBAChBQ,MAAO,mBACPC,gBAAiBC,IAAaI,mBAC9BF,YAAa,WAEf,CACEL,MAAOP,EAAS,UAChBQ,MAAO,SACPC,gBAAiBC,IAAaK,OAC9BH,YAAaF,IAAaK,QAE5B,CACER,MAAOP,EAAS,yBAChBQ,MAAO,sBACPC,gBAAiBC,IAAaM,sBAC9BJ,YAAa,WAEf,CACEL,MAAOP,EAAS,aAChBQ,MAAO,YACPC,gBAAiBC,IAAaO,UAC9BL,YAAaF,IAAaO,WAE5B,CACEV,MAAOP,EAAS,cAChBQ,MAAO,aACPC,gBAAiBC,IAAaQ,WAC9BN,YAAaF,IAAaQ,aAG9B,MAAMC,EAAOC,YAAgBd,EAAWP,EAAMsB,OAE9C,OACEC,IAAAC,cAAA,OAAKC,UAAU,4CACbF,IAAAC,cAAA,MAAIC,UAAU,2BACZF,IAAAC,cAACE,IAAqBC,IAASzB,SAEjCqB,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,OAAKC,UAAU,2BACbF,IAAAC,cAACI,WAAQ,CACPR,KAAMA,EACNS,QAAS,CACPC,OAAQ,CAAEC,SAAU,QAASC,OAAQ,CAAEC,SAAU,KACjDC,SAAU,CAAEC,UAAW,CAAE3B,MAAOA,CAAC4B,EAAShB,IAASiB,YAAcD,EAAShB,SAIhFG,IAAAC,cAAA,OAAKC,UAAU,gCACZlB,EAAU+B,IAAI,CAACpC,EAAQqC,IACtBhB,IAAAC,cAACgB,IAAgB,CACfC,IAAKF,EACLG,MAAO1C,EAAMsB,MAAMpB,EAAOO,OAC1BD,MAAON,EAAOM,MACdiB,UAAU","file":"static/js/9.977f3fa0.chunk.js","sourcesContent":["import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport statusMessages from '../taskSelection/messages';\nimport messages from './messages';\nimport { formatChartData, formatTooltip } from '../../utils/formatChartJSData';\nimport { TASK_COLOURS } from '../../config';\nimport { StatsCardContent } from '../statsCardContent';\n\nconst TasksByStatus = (props) => {\n  const getLabel = (status) => props.intl.formatMessage(statusMessages[`taskStatus_${status}`]);\n\n  let reference = [\n    {\n      label: getLabel('INVALIDATED'),\n      field: 'invalidated',\n      backgroundColor: TASK_COLOURS.INVALIDATED,\n      borderColor: TASK_COLOURS.INVALIDATED,\n    },\n    {\n      label: getLabel('READY'),\n      field: 'ready',\n      backgroundColor: TASK_COLOURS.READY,\n    },\n    {\n      label: getLabel('LOCKED_FOR_MAPPING'),\n      field: 'lockedForMapping',\n      backgroundColor: TASK_COLOURS.LOCKED_FOR_MAPPING,\n      borderColor: '#929db3',\n    },\n    {\n      label: getLabel('MAPPED'),\n      field: 'mapped',\n      backgroundColor: TASK_COLOURS.MAPPED,\n      borderColor: TASK_COLOURS.MAPPED,\n    },\n    {\n      label: getLabel('LOCKED_FOR_VALIDATION'),\n      field: 'lockedForValidation',\n      backgroundColor: TASK_COLOURS.LOCKED_FOR_VALIDATION,\n      borderColor: '#929db3',\n    },\n    {\n      label: getLabel('VALIDATED'),\n      field: 'validated',\n      backgroundColor: TASK_COLOURS.VALIDATED,\n      borderColor: TASK_COLOURS.VALIDATED,\n    },\n    {\n      label: getLabel('BADIMAGERY'),\n      field: 'badImagery',\n      backgroundColor: TASK_COLOURS.BADIMAGERY,\n      borderColor: TASK_COLOURS.BADIMAGERY,\n    },\n  ];\n  const data = formatChartData(reference, props.stats);\n\n  return (\n    <div className=\"cf w-100 mb3 ph2 ph4-ns bg-tan blue-dark\">\n      <h3 className=\"barlow-condensed ttu f3\">\n        <FormattedMessage {...messages.status} />\n      </h3>\n      <div className=\"cf w-100\">\n        <div className=\"w-third-ns w-100 fl pv3\">\n          <Doughnut\n            data={data}\n            options={{\n              legend: { position: 'right', labels: { boxWidth: 12 } },\n              tooltips: { callbacks: { label: (tooltip, data) => formatTooltip(tooltip, data) } },\n            }}\n          />\n        </div>\n        <div className=\"w-two-thirds-ns w-100 fl pv3\">\n          {reference.map((status, n) => (\n            <StatsCardContent\n              key={n}\n              value={props.stats[status.field]}\n              label={status.label}\n              className=\"w-25-ns w-50 fl tc pt3 pb4\"\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default injectIntl(TasksByStatus);\n"],"sourceRoot":""}