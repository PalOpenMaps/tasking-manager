{"version":3,"sources":["hooks/UseAsync.js","components/teamsAndOrgs/campaigns.js","views/campaigns.js"],"names":["useAsync","asyncFunction","immediate","arguments","length","undefined","status","setStatus","useState","value","setValue","error","setError","execute","useCallback","param","then","response","catch","useEffect","CampaignsManagement","_ref","campaigns","userDetails","isCampaignsFetched","query","setQuery","filteredCampaigns","filter","campaign","name","toLowerCase","includes","_jsx","Management","title","FormattedMessage","messages","manage","values","entity","showAddButton","role","managementView","children","_jsxs","ReactPlaceholder","showLoadingAnimation","customPlaceholder","nCardPlaceholders","delay","ready","className","TextField","placeholderMsg","searchCampaigns","onChange","e","target","onCloseIconClick","map","n","CampaignCard","noCampaigns","_ref2","Link","to","concat","id","HashtagIcon","style","paddingTop","CampaignInformation","props","_Fragment","Field","component","type","required","CampaignForm","_ref3","updateCampaignAsync","disabled","disableErrorAlert","Form","onSubmit","initialValues","render","_ref4","handleSubmit","dirty","submitSucceeded","dirtySinceLastSubmit","form","submitting","dirtyForm","campaignInfo","Button","onClick","restart","cancel","disabledClassName","loading","save","CampaignError","Alert","campaignError","ListCampaigns","useSetTitleTag","useSelector","state","auth","useFetch","CreateCampaign","navigate","useNavigate","token","isError","setIsError","createCampaignAsync","payload","pushToLocalJSONAPI","JSON","stringify","result","toast","success","entityCreationSuccess","campaignId","pristine","newCampaign","EntityError","CustomButton","FormSubmitButton","createCampaign","EditCampaign","useParams","projectsError","projectsLoading","projects","encodeURIComponent","nameError","setNameError","updateEntity","onSuccess","onFailure","manageCampaign","DeleteModal","Projects","viewAllEndpoint","ownerEntity"],"mappings":"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","file":"static/js/campaigns.3448a1ea.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\n// source: https://usehooks.com/useAsync/ (with modifications)\n\nexport const useAsync = (asyncFunction, immediate = false) => {\n  const [status, setStatus] = useState('idle');\n  const [value, setValue] = useState(null);\n  const [error, setError] = useState(null);\n\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(\n    (param = null) => {\n      setStatus('pending');\n      setValue(null);\n      setError(null);\n\n      return asyncFunction(param)\n        .then((response) => {\n          setValue(response);\n          setStatus('success');\n        })\n        .catch((error) => {\n          setError(error);\n          setStatus('error');\n        });\n    },\n    [asyncFunction],\n  );\n\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [execute, immediate]);\n\n  return { execute, status, value, error };\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport { Form, Field } from 'react-final-form';\nimport ReactPlaceholder from 'react-placeholder';\n\nimport { nCardPlaceholders } from './campaignsPlaceholder';\nimport messages from './messages';\nimport { Management } from './management';\nimport { Button } from '../button';\nimport { HashtagIcon } from '../svgIcons';\nimport { TextField } from '../formInputs';\n\nexport function CampaignsManagement({ campaigns, userDetails, isCampaignsFetched }: Object) {\n  const [query, setQuery] = useState('');\n\n  const onSearchInputChange = (e) => setQuery(e.target.value);\n\n  const filteredCampaigns = campaigns?.filter((campaign) =>\n    campaign.name.toLowerCase().includes(query.toLowerCase()),\n  );\n\n  return (\n    <Management\n      title={\n        <FormattedMessage\n          {...messages.manage}\n          values={{ entity: <FormattedMessage {...messages.campaigns} /> }}\n        />\n      }\n      showAddButton={userDetails.role === 'ADMIN'}\n      managementView\n    >\n      <ReactPlaceholder\n        showLoadingAnimation={true}\n        customPlaceholder={nCardPlaceholders(4)}\n        delay={10}\n        ready={isCampaignsFetched}\n      >\n        <div className=\"w-20-l w-25-m\">\n          <TextField\n            value={query}\n            placeholderMsg={messages.searchCampaigns}\n            onChange={onSearchInputChange}\n            onCloseIconClick={() => setQuery('')}\n          />\n        </div>\n        {filteredCampaigns?.length ? (\n          filteredCampaigns.map((campaign, n) => <CampaignCard campaign={campaign} key={n} />)\n        ) : (\n          <div>\n            <FormattedMessage {...messages.noCampaigns} />\n          </div>\n        )}\n      </ReactPlaceholder>\n    </Management>\n  );\n}\n\nexport function CampaignCard({ campaign }: Object) {\n  return (\n    <Link to={`${campaign.id}/`} className=\"w-50-ns w-100 fl pr3\">\n      <div className=\"cf bg-white blue-dark br1 mv2 pv4 ph3 ba br1 b--grey-light shadow-hover\">\n        <div className=\"dib v-mid pr3\">\n          <div className=\"z-1 fl br-100 tc h2 w2 bg-blue-light white\">\n            <span className=\"relative w-50 dib\">\n              <HashtagIcon style={{ paddingTop: '0.4175rem' }} />\n            </span>\n          </div>\n        </div>\n        <h3 className=\"f3 mv0 dib v-mid\">{campaign.name}</h3>\n      </div>\n    </Link>\n  );\n}\n\nexport function CampaignInformation(props) {\n  const labelClasses = 'db pt3 pb2';\n  const fieldClasses = 'blue-grey w-100 pv3 ph2 input-reset ba b--grey-light bg-transparent';\n\n  return (\n    <>\n      <div className=\"cf\">\n        <label className={labelClasses}>\n          <FormattedMessage {...messages.name} />\n        </label>\n        <Field name=\"name\" component=\"input\" type=\"text\" className={fieldClasses} required />\n      </div>\n    </>\n  );\n}\n\nexport function CampaignForm({\n  userDetails,\n  campaign,\n  updateCampaignAsync,\n  disabled,\n  disableErrorAlert,\n}) {\n  return (\n    <Form\n      onSubmit={(values) => updateCampaignAsync.execute(values)}\n      initialValues={campaign}\n      render={({\n        handleSubmit,\n        dirty,\n        submitSucceeded,\n        dirtySinceLastSubmit,\n        form,\n        submitting,\n        values,\n      }) => {\n        const dirtyForm = submitSucceeded ? dirtySinceLastSubmit && dirty : dirty;\n        if (dirtySinceLastSubmit) {\n          disableErrorAlert();\n        }\n        return (\n          <div className=\"blue-grey mb3\">\n            <div className={`bg-white b--grey-light pa4 ${dirtyForm ? 'bt bl br' : 'ba'}`}>\n              <h3 className=\"f3 fw6 dib blue-dark mv0\">\n                <FormattedMessage {...messages.campaignInfo} />\n              </h3>\n              <form id=\"campaign-form\" onSubmit={handleSubmit}>\n                <fieldset className=\"bn pa0\" disabled={submitting || disabled}>\n                  <CampaignInformation />\n                </fieldset>\n              </form>\n            </div>\n            {dirtyForm && (\n              <div className=\"cf pt0 h3\">\n                <div className=\"w-70-l w-50 fl tr dib bg-grey-light\">\n                  <Button className=\"blue-dark bg-grey-light h3\" onClick={() => form.restart()}>\n                    <FormattedMessage {...messages.cancel} />\n                  </Button>\n                </div>\n                <div className=\"w-30-l w-50 h-100 fr dib\">\n                  <Button\n                    onClick={() => handleSubmit()}\n                    className=\"w-100 h-100 bg-red white\"\n                    disabledClassName=\"bg-red o-50 white w-100 h-100\"\n                    loading={updateCampaignAsync.status === 'pending'}\n                    disabled={updateCampaignAsync.status === 'pending'}\n                  >\n                    <FormattedMessage {...messages.save} />\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      }}\n    ></Form>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport { Form } from 'react-final-form';\nimport toast from 'react-hot-toast';\n\nimport messages from './messages';\nimport { useFetch } from '../hooks/UseFetch';\nimport { pushToLocalJSONAPI } from '../network/genericJSONRequest';\nimport {\n  CampaignsManagement,\n  CampaignInformation,\n  CampaignForm,\n} from '../components/teamsAndOrgs/campaigns';\nimport { Projects } from '../components/teamsAndOrgs/projects';\nimport { FormSubmitButton, CustomButton } from '../components/button';\nimport { DeleteModal } from '../components/deleteModal';\nimport { useSetTitleTag } from '../hooks/UseMetaTags';\nimport { Alert, EntityError } from '../components/alert';\nimport { useAsync } from '../hooks/UseAsync';\nimport { updateEntity } from '../utils/management';\n\nexport const CampaignError = ({ error }) => {\n  return (\n    <>\n      {error && (\n        <div className=\"cf pv2\">\n          <Alert type=\"error\">\n            <FormattedMessage {...messages.campaignError} />\n          </Alert>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport function ListCampaigns() {\n  useSetTitleTag('Manage campaigns');\n  const userDetails = useSelector((state) => state.auth.userDetails);\n  // TO DO: filter teams of current user\n  const [error, loading, campaigns] = useFetch(`campaigns/`);\n  const isCampaignsFetched = !loading && !error;\n\n  return (\n    <CampaignsManagement\n      campaigns={campaigns.campaigns}\n      userDetails={userDetails}\n      isCampaignsFetched={isCampaignsFetched}\n    />\n  );\n}\n\nexport function CreateCampaign() {\n  useSetTitleTag('Create new campaign');\n  const navigate = useNavigate();\n  const token = useSelector((state) => state.auth.token);\n  const [isError, setIsError] = useState(false);\n\n  const createCampaign = (payload) => {\n    setIsError(false);\n    return pushToLocalJSONAPI('campaigns/', JSON.stringify(payload), token, 'POST')\n      .then((result) => {\n        toast.success(\n          <FormattedMessage\n            {...messages.entityCreationSuccess}\n            values={{\n              entity: 'campaign',\n            }}\n          />,\n        );\n        navigate(`/manage/campaigns/${result.campaignId}`);\n      })\n      .catch(() => setIsError(true));\n  };\n\n  const createCampaignAsync = useAsync(createCampaign);\n\n  return (\n    <Form\n      onSubmit={(values) => createCampaignAsync.execute(values)}\n      render={({ handleSubmit, pristine, form, submitting, values }) => {\n        return (\n          <form onSubmit={handleSubmit} className=\"blue-grey\">\n            <div className=\"cf vh-100\">\n              <h3 className=\"f2 mb3 ttu blue-dark fw7 barlow-condensed\">\n                <FormattedMessage {...messages.newCampaign} />\n              </h3>\n              <div className=\"w-40-l w-100 fl\">\n                <div className=\"bg-white b--grey-light ba pa4 mb3\">\n                  <h3 className=\"f3 blue-dark mv0 fw6\">\n                    <FormattedMessage {...messages.campaignInfo} />\n                  </h3>\n                  <CampaignInformation />\n                </div>\n                {isError && <EntityError entity=\"campaign\" />}\n              </div>\n            </div>\n            <div className=\"fixed left-0 bottom-0 cf bg-white h3 w-100\">\n              <div className=\"w-80-ns w-60-m w-50 h-100 fl tr\">\n                <Link to={'../'}>\n                  <CustomButton className=\"bg-white mr5 pr2 h-100 bn bg-white blue-dark\">\n                    <FormattedMessage {...messages.cancel} />\n                  </CustomButton>\n                </Link>\n              </div>\n              <div className=\"w-20-l w-40-m w-50 h-100 fr\">\n                <FormSubmitButton\n                  disabled={submitting || pristine || createCampaignAsync.status === 'pending'}\n                  loading={submitting || createCampaignAsync.status === 'pending'}\n                  className=\"w-100 h-100 bg-red white\"\n                  disabledClassName=\"bg-red o-50 white w-100 h-100\"\n                >\n                  <FormattedMessage {...messages.createCampaign} />\n                </FormSubmitButton>\n              </div>\n            </div>\n          </form>\n        );\n      }}\n    ></Form>\n  );\n}\n\nexport function EditCampaign() {\n  const { id } = useParams();\n  const userDetails = useSelector((state) => state.auth.userDetails);\n  const token = useSelector((state) => state.auth.token);\n  const [error, loading, campaign] = useFetch(`campaigns/${id}/`, id);\n  useSetTitleTag(`Edit ${campaign.name}`);\n  const [projectsError, projectsLoading, projects] = useFetch(\n    `projects/?campaign=${encodeURIComponent(campaign.name)}&omitMapResults=true`,\n    campaign.name !== undefined,\n  );\n  const [nameError, setNameError] = useState(false);\n\n  const updateCampaign = (payload) => {\n    const onSuccess = () => setNameError(false);\n    const onFailure = () => setNameError(true);\n    return updateEntity(`campaigns/${id}/`, 'campaign', payload, token, onSuccess, onFailure);\n  };\n\n  const updateCampaignAsync = useAsync(updateCampaign);\n\n  return (\n    <div className=\"cf pv4 bg-tan\">\n      <div className=\"cf\">\n        <h3 className=\"f2 ttu blue-dark fw7 barlow-condensed v-mid ma0 dib ttu\">\n          <FormattedMessage {...messages.manageCampaign} />\n        </h3>\n        <DeleteModal id={campaign.id} name={campaign.name} type=\"campaigns\" />\n      </div>\n      <div className=\"w-40-l w-100 mt4 fl\">\n        <CampaignForm\n          userDetails={userDetails}\n          campaign={{ name: campaign.name }}\n          updateCampaignAsync={updateCampaignAsync}\n          disabled={error || loading}\n          disableErrorAlert={() => nameError && setNameError(false)}\n        />\n        <CampaignError error={nameError} />\n      </div>\n      <div className=\"w-60-l w-100 mt4 pl5-l pl0 fl\">\n        <Projects\n          projects={!projectsLoading && !projectsError && projects}\n          viewAllEndpoint={`/manage/projects/?campaign=${encodeURIComponent(campaign.name)}`}\n          ownerEntity=\"campaign\"\n        />\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}