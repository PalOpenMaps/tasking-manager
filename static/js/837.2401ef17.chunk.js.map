{"version":3,"sources":["components/projectCreate/messages.js","hooks/UseAsync.js","utils/geoFileFunctions.js","components/projectCreate/fileUploadErrors.js","components/projectCreate/setAOI.js","hooks/UseGeomContainsMultiplePolygons.js","utils/taskGrid.js","components/projectCreate/setTaskSizes.js","components/projectCreate/trimProject.js","components/projectCreate/navButtons.js","components/projectCreate/review.js","components/projectCreate/index.js"],"names":["defineMessages","createProject","id","defaultMessage","cloneProject","clone","areaSize","areaOverLimitError","taskNumber","step1","step2","step3","step4","name","organization","creationFailed","create","reviewTaskNumberMessage","task","tasks","trimTasksDescriptionLine1","trimTasksDescriptionLine2","trimToAOI","tinyTasks","discard","taskSizes","smaller","larger","invalidFile","unsupportedGeom","noFeatureCollection","closedLinestring","noGeometry","noOrganization","fileSize","splitTaskDescription","reset","showProjectsAOILayer","disabledAOILayer","enableAOILayer","colorLegend","taskNumberMessage","taskAreaMessage","splitByDrawing","splitByClicking","uploadError","backToPrevious","next","trim","trimError","SelfIntersectingAOIError","draw","selectFile","arbitraryTasks","defineAreaDescription","importDescription","useAsync","asyncFunction","immediate","arguments","length","undefined","status","setStatus","useState","value","setValue","error","setError","execute","useCallback","param","then","response","catch","useEffect","osmToGeojson","require","verifyFileSize","file","size","MAX_FILESIZE","Error","verifyFileFormat","format","split","toLowerCase","includes","verifyGeometry","geom","supportedGeoms","type","features","map","feature","validateFeature","geometry","concat","coords","coordinates","JSON","stringify","lineToPolygon","filter","area","readGeoFile","async","fileContent","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","readAsText","readFileAsync","parse","kml","DOMParser","parseFromString","osm","xml","shpjs","getErrorMsg","msg","intlMessageExists","messages","_jsx","FormattedMessage","values","SetAOI","_ref","metadata","updateMetadata","uploadFile","drawHandler","deleteHandler","drawIsActive","containsMultiplePolygons","setContainsMultiplePolygons","useContainsMultiplePolygons","getRootProps","getInputProps","open","useDropzone","onDrop","noClick","noKeyboard","_jsxs","children","className","CustomButton","onClick","icon","MappedIcon","FileImportIcon","SwitchToggle","label","labelPosition","isChecked","onChange","tasksNumber","UndoIcon","AXIS_OFFSET","MAXRESOLUTION","degrees2meters","lon","lat","x","y","Math","log","tan","PI","meters2degress","atan","exp","createTaskFeature","step","zoomLevel","xmax","ymax","minlnglat","maxlnglat","properties","zoom","isSquare","stepBbox","poly","bboxPolygon","multiPolygon","makeGrid","geomBbox","bbox","minxy","maxxy","createTaskGrid","areaOfInterestExtent","xmin","ceil","ymin","floor","pow","xminstep","parseInt","xmaxstep","yminstep","ymaxstep","taskFeatures","taskFeature","push","featureCollection","splitTaskGrid","taskGrid","newTaskGrid","forEach","f","polygon","intersect","g","SetTaskSizes","mapObj","splitMode","setSplitMode","splitHandler","event","getSource","_data","tempTaskGrid","transformScale","on","getCanvas","style","cursor","off","smallerSize","squareGrid","largerSize","useLayoutEffect","setData","addSource","data","_Fragment","role","NineCellsGridIcon","FourCellsGridIcon","CircleIcon","width","splitDrawing","once","delete","changeMode","resetGrid","n","toFixed","sq","trimTaskGrid","params","clipStatus","token","body","areaOfInterest","clipToAoi","grid","pushToLocalJSONAPI","TrimProject","useSelector","state","auth","setClipStatus","tinyTasksNumber","setTinyTasksNumber","trimTaskGridAsync","loading","CutIcon","Alert","message","number","FormattedNumber","removeTinyTasks","WasteIcon","NavButtons","props","intl","useIntl","createProjectAsync","createProjectFn","handleCreate","index","Button","setErr","prevStep","setStep","clearParamsStep","cloneProjectData","resp","maxArea","formatMessage","nextStep","validateStep","Review","projectId","htmlFor","preventDefault","projectName","target","organisation","OrganisationSelect","orgId","organisationId","ProjectCreationMap","React","lazy","ProjectCreate","navigate","useNavigate","drawModeIsActive","setDrawModeIsActive","setShowProjectsAOILayer","setDataGeom","display","validGeometry","fitBounds","padding","err","files","code","e","getAll","updateArea","cloneFromId","setCloneFromId","useQueryParam","NumberParam","cloneProjectName","setCloneProjectName","cloneProjectOrg","setCloneProjectOrg","fetchCloneProjectInfo","res","fetchLocalJSONAPI","projectInfo","isNaN","Number","MAX_AOI_AREA","setMapObj","MapboxDraw","displayControlsDefault","store","dispatch","projectParams","truncate","precision","cloneFromProjectId","toast","success","viewsMessages","entityCreationSuccess","entity","Suspense","fallback","ReactPlaceholder","showLoadingAnimation","rows","delay","supported","renderCurrentStep","bottom","left","unit"],"mappings":"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","file":"static/js/837.2401ef17.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\n/**\n * Internationalized messages for use on project creation.\n */\nexport default defineMessages({\n  createProject: {\n    id: 'management.projects.create.title',\n    defaultMessage: 'Create new project',\n  },\n  cloneProject: {\n    id: 'management.projects.clone.message',\n    defaultMessage: 'The new project will be a clone of the project #{id} ({name}).',\n  },\n  clone: {\n    id: 'management.projects.create.clone',\n    defaultMessage: 'Clone',\n  },\n  areaSize: {\n    id: 'management.projects.create.area_size',\n    defaultMessage: 'Area size: {area} km{sq}',\n  },\n  areaOverLimitError: {\n    id: 'management.projects.create.area_error',\n    defaultMessage: 'Project area is higher than {n} squared kilometers.',\n  },\n  taskNumber: {\n    id: 'management.projects.create.tasks',\n    defaultMessage: 'Number of tasks: {n}',\n  },\n  step1: {\n    id: 'management.projects.create.steps.1',\n    defaultMessage: 'Step 1: define area',\n  },\n  step2: {\n    id: 'management.projects.create.steps.2',\n    defaultMessage: 'Step 2: set tasks sizes',\n  },\n  step3: {\n    id: 'management.projects.create.steps.3',\n    defaultMessage: 'Step 3: trim task grid',\n  },\n  step4: {\n    id: 'management.projects.create.steps.4',\n    defaultMessage: 'Step 4: review',\n  },\n  name: {\n    id: 'management.projects.create.review_tasks.name',\n    defaultMessage: 'Name',\n  },\n  organization: {\n    id: 'management.projects.create.review_tasks.organization',\n    defaultMessage: 'Organization',\n  },\n  creationFailed: {\n    id: 'management.projects.create.review_tasks.failure.message',\n    defaultMessage: 'It was not possible to save your project due to an error: {error}',\n  },\n  create: {\n    id: 'management.projects.create.review_tasks.button.create',\n    defaultMessage: 'Create',\n  },\n  reviewTaskNumberMessage: {\n    id: 'management.projects.create.review_tasks.number',\n    defaultMessage: 'Your project will be created with {n} tasks.',\n  },\n  task: {\n    id: 'management.projects.create.review_tasks.task',\n    defaultMessage: 'task',\n  },\n  tasks: {\n    id: 'management.projects.create.review_tasks.tasks',\n    defaultMessage: 'tasks',\n  },\n  trimTasksDescriptionLine1: {\n    id: 'management.projects.create.trim_tasks.description.1',\n    defaultMessage: 'Trim the task grid to the area of interest (optional).',\n  },\n  trimTasksDescriptionLine2: {\n    id: 'management.projects.create.trim_tasks.description.2',\n    defaultMessage:\n      'You can keep the current tasks or trim the area for your project. This can take some time to execute.',\n  },\n  trimToAOI: {\n    id: 'management.projects.create.trim_tasks.trim_to_aoi',\n    defaultMessage: 'Trim the tasks to define the exact Area of Interest for mapping.',\n  },\n  tinyTasks: {\n    id: 'management.projects.create.trim_tasks.tiny_tasks',\n    defaultMessage:\n      '{number, plural, one {There is # task smaller than {area}m². Would you like to discard it?} other {There are # tasks smaller than {area}m². Would you like to discard them?}}',\n  },\n  discard: {\n    id: 'management.projects.create.trim_tasks.tiny_tasks.discard',\n    defaultMessage: 'Discard',\n  },\n  taskSizes: {\n    id: 'management.projects.create.task_sizes.description',\n    defaultMessage: 'General task size',\n  },\n  smaller: {\n    id: 'management.projects.create.task_sizes.smaller',\n    defaultMessage: 'Smaller',\n  },\n  larger: {\n    id: 'management.projects.create.task_sizes.larger',\n    defaultMessage: 'Larger',\n  },\n  invalidFile: {\n    id: 'management.projects.create.errors.invalid',\n    defaultMessage:\n      'It was not possible to read the geometries on the file. Verify it and upload again.',\n  },\n  unsupportedGeom: {\n    id: 'management.projects.create.errors.unsupported_geom',\n    defaultMessage: 'Unsupported geometry type {geometry}',\n  },\n  noFeatureCollection: {\n    id: 'management.projects.create.errors.no_featurecollection',\n    defaultMessage: 'type field is not FeatureCollection',\n  },\n  closedLinestring: {\n    id: 'management.projects.create.errors.closed_linestring',\n    defaultMessage: 'Points do not form a closed linestring',\n  },\n  noGeometry: {\n    id: 'management.projects.create.errors.no_geometry',\n    defaultMessage: \"You need to define the project's area of interest.\",\n  },\n  noOrganization: {\n    id: 'management.projects.create.errors.no_organization',\n    defaultMessage: 'Organization is a required field.',\n  },\n  fileSize: {\n    id: 'management.projects.create.errors.fileSize',\n    defaultMessage:\n      'We only accept files up to {fileSize} MB. Please reduce the size of your file and try again.',\n  },\n  splitTaskDescription: {\n    id: 'management.projects.create.split_task.description',\n    defaultMessage:\n      'Make tasks smaller by clicking on specific tasks or drawing an area on the map.',\n  },\n  reset: {\n    id: 'management.projects.create.reset.button',\n    defaultMessage: 'Reset',\n  },\n  showProjectsAOILayer: {\n    id: 'management.projects.create.show_aois',\n    defaultMessage: 'Show existing projects AoIs',\n  },\n  disabledAOILayer: {\n    id: 'management.projects.create.show_aois.disabled',\n    defaultMessage:\n      \"Zoom in to be able to activate the visualization of other projects' areas of interest.\",\n  },\n  enableAOILayer: {\n    id: 'management.projects.create.show_aois.enable',\n    defaultMessage: \"Enable the visualization of the existing projects' areas of interest.\",\n  },\n  colorLegend: {\n    id: 'management.projects.create.show_aois.legend',\n    defaultMessage: 'Color legend:',\n  },\n  taskNumberMessage: {\n    id: 'management.projects.create.split.tasks.number',\n    defaultMessage: 'A new project will be created with {n} tasks.',\n  },\n  taskAreaMessage: {\n    id: 'management.projects.create.split.tasks.area',\n    defaultMessage: 'The size of each task is approximately {area} km{sq}.',\n  },\n  splitByDrawing: {\n    id: 'management.projects.create.split_task.draw.button',\n    defaultMessage: 'Draw area to split',\n  },\n  splitByClicking: {\n    id: 'management.projects.create.split_task.click.button',\n    defaultMessage: 'Click to split',\n  },\n  uploadError: {\n    id: 'management.projects.create.upload_file.error',\n    defaultMessage: 'Error when importing geometry. Verify if the file you uploaded is correct.',\n  },\n  backToPrevious: {\n    id: 'management.projects.create.button.back',\n    defaultMessage: 'Back to previous',\n  },\n  next: {\n    id: 'management.projects.create.button.next',\n    defaultMessage: 'Next',\n  },\n  trim: {\n    id: 'management.projects.create.button.trim',\n    defaultMessage: 'Trim',\n  },\n  trimError: {\n    id: 'management.projects.create.trimError',\n    defaultMessage: 'An error occured while trimming the geometry.',\n  },\n  SelfIntersectingAOIError: {\n    id: 'management.projects.create.SelfIntersectingAOIError',\n    defaultMessage: 'Invalid geometry - polygon is self intersecting.',\n  },\n  draw: {\n    id: 'management.projects.create.button.draw',\n    defaultMessage: 'Draw',\n  },\n  selectFile: {\n    id: 'management.projects.create.button.select_file',\n    defaultMessage: 'Select file',\n  },\n  arbitraryTasks: {\n    id: 'management.projects.create.arbitrary_tasks',\n    defaultMessage: 'Set tasks using uploaded polygons',\n  },\n  defineAreaDescription: {\n    id: 'management.projects.create.draw.description',\n    defaultMessage: 'Draw the Area of Interest on the map or import a file.',\n  },\n  importDescription: {\n    id: 'management.projects.create.upload.description',\n    defaultMessage:\n      'The supported file formats are: GeoJSON, KML, OSM or zipped Shapefile. You can drag and drop a file over the map to import it.',\n  },\n});\n","import { useState, useCallback, useEffect } from 'react';\n\n// source: https://usehooks.com/useAsync/ (with modifications)\n\nexport const useAsync = (asyncFunction, immediate = false) => {\n  const [status, setStatus] = useState('idle');\n  const [value, setValue] = useState(null);\n  const [error, setError] = useState(null);\n\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(\n    (param = null) => {\n      setStatus('pending');\n      setValue(null);\n      setError(null);\n\n      return asyncFunction(param)\n        .then((response) => {\n          setValue(response);\n          setStatus('success');\n        })\n        .catch((error) => {\n          setError(error);\n          setStatus('error');\n        });\n    },\n    [asyncFunction],\n  );\n\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [execute, immediate]);\n\n  return { execute, status, value, error };\n};\n","import lineToPolygon from '@turf/line-to-polygon';\nimport area from '@turf/area';\nimport { kml } from '@tmcw/togeojson';\n\nimport { MAX_FILESIZE } from '../config';\nimport shpjs from 'shpjs';\n\nvar osmToGeojson = require('osmtogeojson');\n\nexport const verifyFileSize = (file) => {\n  if (file.size >= MAX_FILESIZE) {\n    throw Error('fileSize');\n  }\n};\n\nexport const verifyFileFormat = (file) => {\n  const format = file.name.split('.')[1].toLowerCase();\n  const supportedFormats = ['json', 'geojson', 'kml', 'osm', 'xml', 'zip'];\n  if (supportedFormats.includes(format) === false) {\n    throw Error('invalidFile');\n  }\n};\n\nexport const validateFeature = (feature, supportedGeoms) => {\n  if (supportedGeoms.includes(feature.geometry.type) === false) {\n    throw Error(`unsupportedGeom - ${feature.geometry.type}`);\n  }\n  // Transform lineString to polygon\n  if (feature.geometry.type === 'LineString') {\n    const coords = feature.geometry.coordinates;\n    if (JSON.stringify(coords[0]) !== JSON.stringify(coords[coords.length - 1])) {\n      throw Error('closedLinestring');\n    }\n    return lineToPolygon(feature);\n  }\n  return feature;\n};\n\nexport const verifyGeometry = (geom, supportedGeoms) => {\n  if (geom.type !== 'FeatureCollection') {\n    throw Error('noFeatureCollection');\n  }\n  // Validate geometry for each feature.\n  geom.features = geom.features\n    .map((feature) => validateFeature(feature, supportedGeoms))\n    .filter((feature) => area(feature) > 0);\n  return geom;\n};\n\nfunction readFileAsync(file, format) {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n\n    reader.onerror = reject;\n\n    if (format === 'zip') {\n      reader.readAsArrayBuffer(file);\n    } else {\n      reader.readAsText(file);\n    }\n  });\n}\n\nexport const readGeoFile = async (file) => {\n  const format = file.name.split('.')[1].toLowerCase();\n\n  let fileContent = await readFileAsync(file, format);\n  switch (format) {\n    case 'json':\n    case 'geojson':\n      return JSON.parse(fileContent);\n    case 'kml':\n      return kml(new DOMParser().parseFromString(fileContent, 'text/xml'));\n    case 'osm':\n      let osm = new DOMParser().parseFromString(fileContent, 'text/xml');\n      return osmToGeojson(osm);\n    case 'xml':\n      let xml = new DOMParser().parseFromString(fileContent, 'text/xml');\n      return osmToGeojson(xml);\n    case 'zip':\n      return shpjs(fileContent).then((geom) => geom);\n    default:\n      break;\n  }\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { MAX_FILESIZE } from '../../config';\nimport messages from './messages';\n\nexport const getErrorMsg = (msg) => {\n  let intlMessageExists = !!messages[msg];\n\n  if (msg === 'fileSize') {\n    return <FormattedMessage {...messages[msg]} values={{ fileSize: MAX_FILESIZE / 1000000 }} />;\n  }\n  if (msg.includes('unsupportedGeom')) {\n    return (\n      <FormattedMessage\n        {...messages[msg.split('-')[0].trim()]}\n        values={{ geometry: msg.split('-')[1].trim() }}\n      />\n    );\n  }\n  return intlMessageExists ? <FormattedMessage {...messages[msg]} /> : null;\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useDropzone } from 'react-dropzone';\n\nimport messages from './messages';\nimport { UndoIcon, MappedIcon, FileImportIcon } from '../svgIcons';\nimport { CustomButton } from '../button';\nimport { SwitchToggle } from '../formInputs';\nimport { useContainsMultiplePolygons } from '../../hooks/UseGeomContainsMultiplePolygons';\n\nexport default function SetAOI({\n  metadata,\n  updateMetadata,\n  uploadFile,\n  drawHandler,\n  deleteHandler,\n  drawIsActive,\n}) {\n  const { containsMultiplePolygons } = useContainsMultiplePolygons(metadata.geom);\n\n  const { getRootProps, getInputProps, open } = useDropzone({\n    onDrop: uploadFile,\n    noClick: true,\n    noKeyboard: true,\n  });\n\n  return (\n    <div {...getRootProps()}>\n      <h3 className=\"f3 fw6 mt0 mb3 ttu barlow-condensed blue-dark\">\n        <FormattedMessage {...messages.step1} />\n      </h3>\n      <div>\n        <p>\n          <FormattedMessage {...messages.defineAreaDescription} />\n        </p>\n        <CustomButton\n          className={`bg-white ph3 pv2 mr2 ba ${\n            drawIsActive ? 'red b--red' : 'blue-dark b--grey-light'\n          }`}\n          onClick={drawHandler}\n          icon={<MappedIcon className=\"h1 w1 v-mid\" />}\n        >\n          <FormattedMessage {...messages.draw} />\n        </CustomButton>\n        <input {...getInputProps()} />\n        <CustomButton\n          className=\"bg-white blue-dark ba b--grey-light ph3 pv2\"\n          onClick={open}\n          icon={<FileImportIcon className=\"h1 w1 v-mid\" />}\n        >\n          <FormattedMessage {...messages.selectFile} />\n        </CustomButton>\n        <p className=\"f6 blue-grey lh-title mt3\">\n          <FormattedMessage {...messages.importDescription} />\n        </p>\n      </div>\n\n      <div className=\"pb2\">\n        {containsMultiplePolygons && (\n          <SwitchToggle\n            label={<FormattedMessage {...messages.arbitraryTasks} />}\n            labelPosition=\"right\"\n            isChecked={metadata.arbitraryTasks}\n            onChange={() =>\n              updateMetadata({\n                ...metadata,\n                arbitraryTasks: !metadata.arbitraryTasks,\n                tasksNumber:\n                  metadata.geom && metadata.geom.features ? metadata.geom.features.length : 0,\n              })\n            }\n          />\n        )}\n      </div>\n      {metadata.geom && (\n        <div>\n          <CustomButton\n            className=\"bg-white blue-dark ba b--grey-light ph3 pv2\"\n            onClick={deleteHandler}\n            icon={<UndoIcon className=\"w1 h1 v-top\" />}\n          >\n            <FormattedMessage {...messages.reset} />\n          </CustomButton>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nexport function useContainsMultiplePolygons(geom) {\n  const [containsMultiplePolygons, setContainsMultiplePolygons] = useState(false);\n  useEffect(() => {\n    if (geom && geom.features && geom.features.length) {\n      if (geom.features.length > 1) setContainsMultiplePolygons(true);\n      if (geom.features.length === 1 && geom.features[0].geometry.type === 'MultiPolygon') {\n        setContainsMultiplePolygons(true);\n      }\n    }\n    if (geom === null || (geom.features && geom.features.length === 0)) {\n      setContainsMultiplePolygons(false);\n    }\n  }, [setContainsMultiplePolygons, geom]);\n  return { containsMultiplePolygons };\n}\n","import intersect from '@turf/intersect';\nimport bboxPolygon from '@turf/bbox-polygon';\nimport bbox from '@turf/bbox';\nimport { polygon, multiPolygon, featureCollection } from '@turf/helpers';\n\n// Maximum resolution of OSM\nconst MAXRESOLUTION = 156543.0339;\n\n// X/Y axis offset\nexport const AXIS_OFFSET = (MAXRESOLUTION * 256) / 2;\n\nexport const degrees2meters = (lon, lat) => {\n  const x = (lon * 20037508.34) / 180;\n  let y = Math.log(Math.tan(((90 + lat) * Math.PI) / 360)) / (Math.PI / 180);\n  y = (y * 20037508.34) / 180;\n\n  return [x, y];\n};\n\nexport const meters2degress = (x, y) => {\n  const lon = (x * 180) / 20037508.34;\n  //thanks magichim @ github for the correction\n  const lat = (Math.atan(Math.exp((y * Math.PI) / 20037508.34)) * 360) / Math.PI - 90;\n\n  return [lon, lat];\n};\n\nexport const createTaskFeature = (step, x, y, zoomLevel) => {\n  const xmin = x * step - AXIS_OFFSET;\n  const ymin = y * step - AXIS_OFFSET;\n  const xmax = (x + 1) * step - AXIS_OFFSET;\n  const ymax = (y + 1) * step - AXIS_OFFSET;\n\n  const minlnglat = meters2degress(xmin, ymin);\n  const maxlnglat = meters2degress(xmax, ymax);\n\n  const properties = {\n    x: x,\n    y: y,\n    zoom: zoomLevel,\n    isSquare: true,\n  };\n  const stepBbox = [minlnglat[0], minlnglat[1], maxlnglat[0], maxlnglat[1]];\n  const poly = bboxPolygon(stepBbox);\n\n  return multiPolygon([poly.geometry.coordinates], properties);\n};\n\nexport const createTaskGrid = (areaOfInterestExtent, zoomLevel) => {\n  const xmin = Math.ceil(areaOfInterestExtent[0]);\n  const ymin = Math.ceil(areaOfInterestExtent[1]);\n  const xmax = Math.floor(areaOfInterestExtent[2]);\n  const ymax = Math.floor(areaOfInterestExtent[3]);\n\n  // task size (in meters) at the required zoom level\n  const step = AXIS_OFFSET / Math.pow(2, zoomLevel - 1);\n\n  // Calculate the min and max task indices at the required zoom level to cover the whole area of interest\n  const xminstep = parseInt(Math.floor((xmin + AXIS_OFFSET) / step));\n  const xmaxstep = parseInt(Math.ceil((xmax + AXIS_OFFSET) / step));\n  const yminstep = parseInt(Math.floor((ymin + AXIS_OFFSET) / step));\n  const ymaxstep = parseInt(Math.ceil((ymax + AXIS_OFFSET) / step));\n\n  let taskFeatures = [];\n  // Generate an array of task features\n  for (let x = xminstep; x < xmaxstep; x++) {\n    for (let y = yminstep; y < ymaxstep; y++) {\n      let taskFeature = createTaskFeature(step, x, y, zoomLevel);\n      taskFeatures.push(taskFeature);\n    }\n  }\n\n  return featureCollection(taskFeatures);\n};\n\nexport const makeGrid = (geom, zoom) => {\n  let geomBbox = bbox(geom);\n\n  const minxy = degrees2meters(geomBbox[0], geomBbox[1]);\n  const maxxy = degrees2meters(geomBbox[2], geomBbox[3]);\n\n  geomBbox = [minxy[0], minxy[1], maxxy[0], maxxy[1]];\n\n  const grid = createTaskGrid(geomBbox, zoom);\n\n  return grid;\n};\n\nexport const splitTaskGrid = (taskGrid, geom) => {\n  let newTaskGrid = [];\n  taskGrid.features.forEach((f) => {\n    let poly = polygon(f.geometry.coordinates[0]);\n    let contains = intersect(geom, poly);\n    if (contains === null) {\n      newTaskGrid.push(f);\n    } else {\n      const splitGrid = makeGrid(f, f.properties.zoom + 1);\n      splitGrid.features.forEach((g) => {\n        newTaskGrid.push(g);\n      });\n    }\n  });\n\n  return newTaskGrid;\n};\n","import React, { useEffect, useLayoutEffect, useState, useCallback } from 'react';\nimport area from '@turf/area';\nimport transformScale from '@turf/transform-scale';\nimport { featureCollection } from '@turf/helpers';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from './messages';\nimport { splitTaskGrid, makeGrid } from '../../utils/taskGrid';\nimport { CustomButton } from '../button';\nimport {\n  UndoIcon,\n  MappedIcon,\n  CircleIcon,\n  FourCellsGridIcon,\n  NineCellsGridIcon,\n} from '../svgIcons';\n\nexport default function SetTaskSizes({ metadata, mapObj, updateMetadata }) {\n  const [splitMode, setSplitMode] = useState(null);\n\n  const splitHandler = useCallback(\n    (event) => {\n      const taskGrid = mapObj.map.getSource('grid')._data;\n\n      if (metadata.tempTaskGrid === null) {\n        updateMetadata({ ...metadata, tempTaskGrid: taskGrid });\n      }\n      // Make the geom smaller to avoid borders.\n      const geom = transformScale(event.features[0].geometry, 0.5);\n      const newTaskGrid = splitTaskGrid(taskGrid, geom);\n\n      updateMetadata({\n        ...metadata,\n        taskGrid: featureCollection(newTaskGrid),\n        tasksNumber: featureCollection(newTaskGrid).features.length,\n      });\n    },\n    [updateMetadata, metadata, mapObj.map],\n  );\n\n  useEffect(() => {\n    if (splitMode === 'click') {\n      mapObj.map.on('mouseenter', 'grid', (event) => {\n        mapObj.map.getCanvas().style.cursor = 'pointer';\n      });\n      mapObj.map.on('mouseleave', 'grid', (event) => {\n        mapObj.map.getCanvas().style.cursor = '';\n      });\n      mapObj.map.on('click', 'grid', splitHandler);\n    } else {\n      mapObj.map.on('mouseenter', 'grid', (event) => {\n        mapObj.map.getCanvas().style.cursor = '';\n      });\n      mapObj.map.off('click', 'grid', splitHandler);\n    }\n  }, [mapObj, splitHandler, splitMode]);\n\n  const splitDrawing = () => {\n    setSplitMode('draw');\n    mapObj.map.on('mouseenter', 'grid', (event) => {\n      mapObj.map.getCanvas().style.cursor = 'crosshair';\n    });\n    mapObj.map.on('mouseleave', 'grid', (event) => {\n      mapObj.map.getCanvas().style.cursor = '';\n    });\n    mapObj.map.once('draw.create', (event) => {\n      const taskGrid = mapObj.map.getSource('grid')._data;\n      if (metadata.tempTaskGrid === null) {\n        updateMetadata({ ...metadata, tempTaskGrid: taskGrid });\n      }\n\n      const id = event.features[0].id;\n      mapObj.draw.delete(id);\n\n      const geom = event.features[0].geometry;\n      const newTaskGrid = splitTaskGrid(taskGrid, geom);\n\n      updateMetadata({\n        ...metadata,\n        taskGrid: featureCollection(newTaskGrid),\n        tasksNumber: featureCollection(newTaskGrid).features.length,\n      });\n      setSplitMode(null);\n    });\n\n    mapObj.draw.changeMode('draw_polygon');\n  };\n\n  const resetGrid = () => {\n    updateMetadata({ ...metadata, taskGrid: metadata.tempTaskGrid });\n  };\n\n  const smallerSize = useCallback(() => {\n    const zoomLevel = metadata.zoomLevel + 1;\n    const squareGrid = makeGrid(metadata.geom, zoomLevel);\n    updateMetadata({\n      ...metadata,\n      zoomLevel: zoomLevel,\n      tempTaskGrid: squareGrid,\n      taskGrid: squareGrid,\n      tasksNumber: squareGrid.features.length,\n    });\n  }, [metadata, updateMetadata]);\n\n  const largerSize = useCallback(() => {\n    const zoomLevel = metadata.zoomLevel - 1;\n    const squareGrid = makeGrid(metadata.geom, zoomLevel);\n    if (zoomLevel > 0) {\n      updateMetadata({\n        ...metadata,\n        zoomLevel: zoomLevel,\n        tempTaskGrid: squareGrid,\n        taskGrid: squareGrid,\n        tasksNumber: squareGrid.features.length,\n      });\n    }\n  }, [metadata, updateMetadata]);\n\n  useLayoutEffect(() => {\n    if (mapObj.map.getSource('grid') !== undefined) {\n      mapObj.map.getSource('grid').setData(metadata.taskGrid);\n    } else {\n      mapObj.map.addSource('grid', {\n        type: 'geojson',\n        data: { type: 'FeatureCollection', features: metadata.taskGrid },\n      });\n    }\n    return () => {\n      // remove the split on click function when leaving the page\n      mapObj.map.off('click', 'grid', splitHandler);\n    };\n  }, [metadata, mapObj, smallerSize, largerSize, splitHandler]);\n\n  return (\n    <>\n      <h3 className=\"f3 ttu fw6 mt2 mb3 barlow-condensed blue-dark\">\n        <FormattedMessage {...messages.step2} />\n      </h3>\n      <div>\n        <div>\n          <p>\n            <FormattedMessage {...messages.taskSizes} />\n          </p>\n          <div role=\"group\">\n            <CustomButton\n              className=\"bg-white blue-dark ba b--grey-light ph3 pv2 mr2\"\n              onClick={smallerSize}\n              icon={<NineCellsGridIcon className=\"h1 w1 v-mid\" />}\n            >\n              <FormattedMessage {...messages.smaller} />\n            </CustomButton>\n            <CustomButton\n              className=\"bg-white blue-dark ba b--grey-light ph3 pv2\"\n              onClick={largerSize}\n              icon={<FourCellsGridIcon className=\"h1 w1 v-mid\" />}\n            >\n              <FormattedMessage {...messages.larger} />\n            </CustomButton>\n          </div>\n        </div>\n        <div className=\"pt3 pb1\">\n          <p>\n            <FormattedMessage {...messages.splitTaskDescription} />\n          </p>\n          <div role=\"group\">\n            <CustomButton\n              className={`bg-white ph3 pv2 mr2 ba ${\n                splitMode === 'click' ? 'red b--red' : 'blue-dark b--grey-light'\n              }`}\n              onClick={() => setSplitMode(splitMode === 'click' ? null : 'click')}\n              icon={<CircleIcon className=\"v-mid\" style={{ width: '0.5rem' }} />}\n            >\n              <FormattedMessage {...messages.splitByClicking} />\n            </CustomButton>\n            <CustomButton\n              className={`bg-white ph3 pv2 mr2 ba ${\n                splitMode === 'draw' ? 'red b--red' : 'blue-dark b--grey-light'\n              }`}\n              onClick={splitDrawing}\n              icon={<MappedIcon className=\"h1 w1 v-mid\" />}\n            >\n              <FormattedMessage {...messages.splitByDrawing} />\n            </CustomButton>\n            <CustomButton\n              className=\"bg-white blue-dark ba b--grey-light ph3 pv2\"\n              onClick={resetGrid}\n              icon={<UndoIcon className=\"w1 h1 v-mid\" />}\n            >\n              <FormattedMessage {...messages.reset} />\n            </CustomButton>\n          </div>\n        </div>\n        <p className=\"f6 blue-grey lh-title mt3 mb2\">\n          <FormattedMessage\n            {...messages.taskNumberMessage}\n            values={{ n: <strong>{metadata.tasksNumber || 0}</strong> }}\n          />\n        </p>\n        <p className=\"f6 blue-grey lh-title mt1\">\n          {metadata.taskGrid && metadata.taskGrid.features && (\n            <FormattedMessage\n              {...messages.taskAreaMessage}\n              values={{\n                area: (\n                  <strong>{(area(metadata.taskGrid.features[0]) / 1e6).toFixed(2) || 0}</strong>\n                ),\n                sq: <sup>2</sup>,\n              }}\n            />\n          )}\n        </p>\n      </div>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport area from '@turf/area';\nimport { featureCollection } from '@turf/helpers';\nimport { FormattedMessage, FormattedNumber } from 'react-intl';\n\nimport messages from './messages';\nimport { CustomButton } from '../button';\nimport { SwitchToggle } from '../formInputs';\nimport { CutIcon, WasteIcon } from '../svgIcons';\nimport { pushToLocalJSONAPI } from '../../network/genericJSONRequest';\nimport { useAsync } from '../../hooks/UseAsync';\nimport { Alert } from '../alert';\n\nconst trimTaskGrid = (params) => {\n  const { clipStatus, metadata, updateMetadata, token } = params;\n  const body = JSON.stringify({\n    areaOfInterest: metadata.geom,\n    clipToAoi: clipStatus,\n    grid: metadata.tempTaskGrid,\n  });\n\n  return pushToLocalJSONAPI('projects/actions/intersecting-tiles/', body, token).then((grid) => {\n    updateMetadata({ ...metadata, tasksNumber: grid.features.length, taskGrid: grid });\n  });\n};\n\nconst removeTinyTasks = (metadata, updateMetadata) => {\n  const newTaskGrid = featureCollection(\n    metadata.taskGrid.features.filter((task) => area(task) >= 2000),\n  );\n  updateMetadata({\n    ...metadata,\n    tasksNumber: newTaskGrid.features.length,\n    taskGrid: newTaskGrid,\n  });\n};\n\nexport default function TrimProject({ metadata, mapObj, updateMetadata }) {\n  const token = useSelector((state) => state.auth.token);\n  const [clipStatus, setClipStatus] = useState(false);\n  const [tinyTasksNumber, setTinyTasksNumber] = useState(0);\n\n  const trimTaskGridAsync = useAsync(trimTaskGrid);\n\n  useEffect(() => {\n    mapObj.map\n      .getSource('grid')\n      .setData(featureCollection(metadata.taskGrid.features.filter((task) => area(task) >= 2000)));\n    const tinyTasks = metadata.taskGrid.features.filter((task) => area(task) < 2000);\n    mapObj.map.getSource('tiny-tasks').setData(featureCollection(tinyTasks));\n    setTinyTasksNumber(tinyTasks.length);\n  }, [metadata, mapObj]);\n\n  return (\n    <>\n      <h3 className=\"f3 ttu fw6 mt2 mb3 barlow-condensed blue-dark\">\n        <FormattedMessage {...messages.step3} />\n      </h3>\n      <div>\n        <p>\n          <FormattedMessage {...messages.trimTasksDescriptionLine1} />\n        </p>\n        <p className=\"pb2\">\n          <FormattedMessage {...messages.trimTasksDescriptionLine2} />\n        </p>\n        {tinyTasksNumber === 0 ? (\n          <>\n            <SwitchToggle\n              isChecked={clipStatus}\n              labelPosition=\"right\"\n              onChange={() => setClipStatus(!clipStatus)}\n              label={<FormattedMessage {...messages.trimToAOI} />}\n            />\n            <div className=\"pt3\">\n              <CustomButton\n                onClick={() =>\n                  trimTaskGridAsync.execute({ clipStatus, metadata, updateMetadata, token })\n                }\n                className=\"bg-white blue-dark ba b--grey-light ph3 pv2\"\n                loading={trimTaskGridAsync.status === 'pending'}\n                icon={<CutIcon className=\"h1 w1 v-mid\" />}\n              >\n                <FormattedMessage {...messages.trim} />\n              </CustomButton>\n            </div>\n            {trimTaskGridAsync.status === 'error' && (\n              <div className=\"mt3\">\n                <Alert type=\"error\">\n                  {`${trimTaskGridAsync.error.message}Error` in messages && (\n                    <FormattedMessage {...messages[`${trimTaskGridAsync.error.message}Error`]} />\n                  )}\n                  {!(`${trimTaskGridAsync.error.message}Error` in messages) && (\n                    <FormattedMessage {...messages.trimError} />\n                  )}\n                </Alert>\n              </div>\n            )}\n          </>\n        ) : (\n          <div className=\"pt0 fw6\">\n            <div className=\"cf w-100 pb2\">\n              <div className=\"w-auto fl di h2\">\n                <span className=\"dib v-mid h1 w1 bg-pink mr2\"></span>\n              </div>\n              <div className=\"w-auto di\">\n                <FormattedMessage\n                  {...messages.tinyTasks}\n                  values={{ number: tinyTasksNumber, area: <FormattedNumber value={2000} /> }}\n                />\n              </div>\n            </div>\n            <CustomButton\n              onClick={() => removeTinyTasks(metadata, updateMetadata)}\n              className=\"bg-white blue-dark ba b--grey-light ph3 pv2\"\n              icon={<WasteIcon className=\"h1 w1 v-mid\" />}\n            >\n              <FormattedMessage {...messages.discard} />\n            </CustomButton>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { featureCollection } from '@turf/helpers';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport messages from './messages';\nimport { Button } from '../button';\nimport { useAsync } from '../../hooks/UseAsync';\n\nconst clearParamsStep = (props) => {\n  switch (props.index) {\n    case 2: //clear Tasks\n      props.mapObj.map.getSource('grid').setData(featureCollection([]));\n      props.updateMetadata({ ...props.metadata, tasksNumber: 0 });\n      break;\n    case 3:\n      props.mapObj.map.getSource('tiny-tasks').setData(featureCollection([]));\n      props.updateMetadata({\n        ...props.metadata,\n        taskGrid: props.metadata.tempTaskGrid,\n        tasksNumber: props.metadata.tempTaskGrid.features.length,\n      });\n      break;\n    case 4:\n      props.setErr({ error: false, message: '' });\n      break;\n    default:\n      break;\n  }\n\n  let prevStep = props.index - 1;\n\n  // If task is arbitrary. Jump to review.\n  if (props.metadata.arbitraryTasks === true) {\n    props.updateMetadata({ ...props.metadata, tasksNumber: 0 });\n    if (props.metadata.geom.features) {\n      props.updateMetadata({ ...props.metadata, tasksNumber: props.metadata.geom.features.length });\n    }\n    prevStep = 1;\n  }\n  props.setStep(prevStep);\n};\n\nconst NavButtons = (props) => {\n  const intl = useIntl();\n\n  const createProjectFn = () => {\n    return new Promise((resolve, reject) => props.handleCreate());\n  };\n  const createProjectAsync = useAsync(createProjectFn);\n\n  const validateStep = (props) => {\n    switch (props.index) {\n      case 1: // Set Project AOI.\n        if (props.metadata.area >= props.maxArea) {\n          const message = intl.formatMessage(messages.areaOverLimitError, { n: props.maxArea });\n          return { error: true, message: message };\n        } else if (props.metadata.area === 0) {\n          const message = intl.formatMessage(messages.noGeometry);\n          return { error: true, message: message };\n        } else {\n          const id = props.metadata.geom.features[0].id;\n          props.mapObj.draw.delete(id);\n          props.mapObj.map.getSource('aoi').setData(props.metadata.geom);\n          props.updateMetadata({\n            ...props.metadata,\n            tasksNumber: props.metadata.arbitraryTasks\n              ? props.metadata.geom.features.length\n              : props.metadata.taskGrid.features.length,\n          });\n          // clear the otherProjects source before passing to step 2\n          props.mapObj.map.getSource('otherProjects').setData(featureCollection([]));\n        }\n\n        break;\n      case 2: // Set Task grid.\n        const taskGrid = props.mapObj.map.getSource('grid')._data;\n        props.updateMetadata({ ...props.metadata, taskGrid: taskGrid, tempTaskGrid: taskGrid });\n        break;\n      case 3: // Trim Project.\n        break;\n\n      default:\n        return;\n    }\n    let nextStep = props.index + 1;\n\n    // If task is arbitrary. Jump to review.\n    if (props.metadata.arbitraryTasks === true) {\n      nextStep = 4;\n    }\n    props.setStep(nextStep);\n    return { error: false, message: '' };\n  };\n  const stepHandler = (event) => {\n    const resp = validateStep(props);\n    props.setErr(resp);\n  };\n\n  return (\n    <div className=\"pt2\">\n      {props.index === 1 ? null : (\n        <Button onClick={() => clearParamsStep(props)} className=\"blue-dark bg-white mr3\">\n          <FormattedMessage {...messages.backToPrevious} />\n        </Button>\n      )}\n      {props.index === 4 ? (\n        <Button\n          onClick={() => createProjectAsync.execute()}\n          className=\"white bg-red\"\n          loading={createProjectAsync.status === 'pending'}\n        >\n          {props.cloneProjectData.name === null ? (\n            <FormattedMessage {...messages.create} />\n          ) : (\n            <FormattedMessage {...messages.clone} />\n          )}\n        </Button>\n      ) : (\n        <Button onClick={stepHandler} className=\"white bg-red\">\n          <FormattedMessage {...messages.next} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default NavButtons;\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from './messages';\nimport { Alert } from '../alert';\n\nimport { OrganisationSelect } from '../formInputs';\n\nexport default function Review({ metadata, updateMetadata, token, projectId, cloneProjectData }) {\n  const [error, setError] = useState(null);\n\n  const setProjectName = (event) => {\n    event.preventDefault();\n    updateMetadata({ ...metadata, projectName: event.target.value });\n  };\n\n  return (\n    <>\n      <h3 className=\"f3 ttu fw6 mt2 mb3 barlow-condensed blue-dark\">\n        <FormattedMessage {...messages.step4} />\n      </h3>\n      <p className=\"pt2\">\n        <FormattedMessage\n          {...messages.reviewTaskNumberMessage}\n          values={{ n: metadata.tasksNumber }}\n        />\n      </p>\n\n      {cloneProjectData.name === null ? (\n        <>\n          <label htmlFor=\"name\" className=\"f5 fw6 db mb2 pt3\">\n            <FormattedMessage {...messages.name} />\n          </label>\n          <input\n            onChange={setProjectName}\n            id=\"name\"\n            className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n            type=\"text\"\n          />\n        </>\n      ) : null}\n\n      {cloneProjectData.organisation === null ? (\n        <>\n          <label className=\"f5 fw6 db mb2 pt3\">\n            <FormattedMessage {...messages.organization} />\n          </label>\n          <OrganisationSelect\n            orgId={metadata.organisation}\n            onChange={(value) => {\n              setError(null);\n              updateMetadata({ ...metadata, organisation: value.organisationId || '' });\n            }}\n            className=\"z-5 w-75\"\n          />\n        </>\n      ) : null}\n\n      {error && (\n        <Alert type=\"error\">\n          <FormattedMessage {...messages.creationFailed} values={{ error: error }} />\n        </Alert>\n      )}\n    </>\n  );\n}\n","import React, { useState, useLayoutEffect, useCallback, Suspense, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useQueryParam, NumberParam } from 'use-query-params';\nimport { FormattedMessage, FormattedNumber, useIntl } from 'react-intl';\nimport ReactPlaceholder from 'react-placeholder';\nimport { supported } from 'mapbox-gl';\nimport area from '@turf/area';\nimport bbox from '@turf/bbox';\nimport { featureCollection } from '@turf/helpers';\nimport truncate from '@turf/truncate';\nimport toast from 'react-hot-toast';\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\n\nimport messages from './messages';\nimport viewsMessages from '../../views/messages';\nimport { createProject } from '../../store/actions/project';\nimport { store } from '../../store';\nimport { fetchLocalJSONAPI, pushToLocalJSONAPI } from '../../network/genericJSONRequest';\nimport SetAOI from './setAOI';\nimport SetTaskSizes from './setTaskSizes';\nimport TrimProject from './trimProject';\nimport NavButtons from './navButtons';\nimport Review from './review';\nimport { Alert } from '../alert';\nimport { makeGrid } from '../../utils/taskGrid';\nimport { MAX_AOI_AREA } from '../../config';\nimport {\n  verifyGeometry,\n  readGeoFile,\n  verifyFileFormat,\n  verifyFileSize,\n} from '../../utils/geoFileFunctions';\nimport { getErrorMsg } from './fileUploadErrors';\n\nconst ProjectCreationMap = React.lazy(() =>\n  import('./projectCreationMap' /* webpackChunkName: \"projectCreationMap\" */),\n);\n\nconst ProjectCreate = () => {\n  const intl = useIntl();\n  const token = useSelector((state) => state.auth.token);\n  const navigate = useNavigate();\n  const [drawModeIsActive, setDrawModeIsActive] = useState(false);\n  const [showProjectsAOILayer, setShowProjectsAOILayer] = useState(false);\n\n  const setDataGeom = (geom, display) => {\n    const supportedGeoms = ['Polygon', 'MultiPolygon', 'LineString'];\n\n    try {\n      let validGeometry = verifyGeometry(geom, supportedGeoms);\n\n      mapObj.map.fitBounds(bbox(validGeometry), { padding: 200 });\n      const zoomLevel = 11;\n      const grid = makeGrid(validGeometry, zoomLevel);\n      updateMetadata({\n        ...metadata,\n        geom: validGeometry,\n        area: (area(validGeometry) / 1e6).toFixed(2),\n        zoomLevel: zoomLevel,\n        taskGrid: grid,\n        tempTaskGrid: grid,\n      });\n\n      if (display === true) {\n        mapObj.map.getSource('aoi').setData(validGeometry);\n      }\n    } catch (err) {\n      setErr({ error: true, message: getErrorMsg(err.message) || err.message });\n    }\n  };\n\n  const uploadFile = (files) => {\n    const file = files[0];\n    if (!file) return null;\n    try {\n      setErr({ code: 403, message: null }); //reset error on new file upload\n\n      verifyFileFormat(file);\n      verifyFileSize(file);\n\n      readGeoFile(file)\n        .then((geometry) => {\n          setDataGeom(geometry, true);\n        })\n        .catch((error) =>\n          setErr({ error: true, message: getErrorMsg(error.message) || error.message }),\n        );\n    } catch (e) {\n      deleteHandler();\n      setErr({ error: true, message: getErrorMsg(e.message) || e.message });\n    }\n  };\n\n  const deleteHandler = () => {\n    const features = mapObj.draw.getAll();\n    if (features.features.length > 0) {\n      const id = features.features[0].id;\n      mapObj.draw.delete(id);\n    }\n\n    if (mapObj.map.getSource('aoi')) {\n      mapObj.map.getSource('aoi').setData(featureCollection([]));\n    }\n    updateMetadata({ ...metadata, area: 0, geom: null, arbitraryTasks: false, tasksNumber: 0 });\n  };\n\n  const drawHandler = () => {\n    if (drawModeIsActive) {\n      setDrawModeIsActive(false);\n      mapObj.draw.changeMode('simple_select');\n      return;\n    }\n    setDrawModeIsActive(true);\n    const updateArea = (event) => {\n      const features = mapObj.draw.getAll();\n      if (features.features.length > 1) {\n        const id = features.features[0].id;\n        mapObj.draw.delete(id);\n      }\n\n      // Validate area first.\n      setDataGeom(featureCollection(event.features), false);\n      setDrawModeIsActive(false);\n    };\n\n    mapObj.map.on('draw.update', updateArea);\n    mapObj.map.once('draw.create', updateArea);\n    mapObj.draw.changeMode('draw_polygon');\n  };\n  // eslint-disable-next-line\n  const [cloneFromId, setCloneFromId] = useQueryParam('cloneFrom', NumberParam);\n  const [step, setStep] = useState(1);\n  const [cloneProjectName, setCloneProjectName] = useState(null);\n  const [cloneProjectOrg, setCloneProjectOrg] = useState(null);\n  const [err, setErr] = useState({ error: false, message: null });\n\n  const fetchCloneProjectInfo = useCallback(\n    async (cloneFromId) => {\n      const res = await fetchLocalJSONAPI(`projects/${cloneFromId}/`, token);\n      setCloneProjectName(res.projectInfo.name);\n      setCloneProjectOrg(res.organisation);\n    },\n    [setCloneProjectName, setCloneProjectOrg, token],\n  );\n\n  useLayoutEffect(() => {\n    if (cloneFromId && !isNaN(Number(cloneFromId))) {\n      fetchCloneProjectInfo(cloneFromId);\n    }\n  }, [cloneFromId, fetchCloneProjectInfo]);\n\n  let cloneProjectData = {\n    id: cloneFromId,\n    name: cloneProjectName,\n    organisation: cloneProjectOrg,\n  };\n\n  // Project information.\n  const [metadata, updateMetadata] = useState({\n    geom: null,\n    area: 0,\n    tasksNumber: 0,\n    taskGrid: null,\n    projectName: '',\n    zoomLevel: 9,\n    tempTaskGrid: null,\n    arbitraryTasks: false,\n    organisation: '',\n  });\n\n  useLayoutEffect(() => {\n    let err = { error: false, message: null };\n    if (metadata.area > MAX_AOI_AREA) {\n      err = {\n        error: true,\n        message: <FormattedMessage {...messages.areaOverLimitError} values={{ n: MAX_AOI_AREA }} />,\n      };\n    }\n    setErr(err);\n  }, [metadata]);\n\n  const drawOptions = {\n    displayControlsDefault: false,\n  };\n  const [mapObj, setMapObj] = useState({\n    map: null,\n    draw: new MapboxDraw(drawOptions),\n  });\n\n  const handleCreate = useCallback(\n    (cloneProjectData) => {\n      if (!metadata.geom) {\n        setErr({ error: true, message: intl.formatMessage(messages.noGeometry) });\n        throw new Error('Missing geom.');\n      }\n      if (!metadata.organisation && !cloneProjectData.organisation) {\n        setErr({ error: true, message: intl.formatMessage(messages.noOrganization) });\n        throw new Error('Missing organization information.');\n      }\n\n      store.dispatch(createProject(metadata));\n      let projectParams = {\n        areaOfInterest: truncate(metadata.geom, { precision: 6 }),\n        projectName: metadata.projectName,\n        organisation: metadata.organisation || cloneProjectData.organisation,\n        tasks: truncate(metadata.taskGrid, { precision: 6 }),\n        arbitraryTasks: metadata.arbitraryTasks,\n      };\n\n      if (cloneProjectData.name !== null) {\n        projectParams.projectName = '';\n        projectParams.cloneFromProjectId = cloneProjectData.id;\n      }\n      pushToLocalJSONAPI('projects/', JSON.stringify(projectParams), token)\n        .then((res) => {\n          toast.success(\n            <FormattedMessage\n              {...viewsMessages.entityCreationSuccess}\n              values={{\n                entity: 'project',\n              }}\n            />,\n          );\n          navigate(`/manage/projects/${res.projectId}`);\n        })\n        .catch((e) => {\n          setErr({\n            error: true,\n            message: <FormattedMessage {...messages.creationFailed} values={{ error: e }} />,\n          });\n        });\n    },\n    [metadata, token, intl, navigate],\n  );\n\n  useEffect(() => {\n    if (!token) {\n      return navigate('/login');\n    }\n  }, [navigate, token]);\n\n  const renderCurrentStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <SetAOI\n            metadata={metadata}\n            updateMetadata={updateMetadata}\n            uploadFile={uploadFile}\n            drawHandler={drawHandler}\n            deleteHandler={deleteHandler}\n            drawIsActive={drawModeIsActive}\n            showProjectsAOILayer={showProjectsAOILayer}\n            setShowProjectsAOILayer={setShowProjectsAOILayer}\n          />\n        );\n      case 2:\n        return <SetTaskSizes mapObj={mapObj} metadata={metadata} updateMetadata={updateMetadata} />;\n      case 3:\n        return <TrimProject mapObj={mapObj} metadata={metadata} updateMetadata={updateMetadata} />;\n      case 4:\n        return (\n          <Review\n            metadata={metadata}\n            updateMetadata={updateMetadata}\n            token={token}\n            cloneProjectData={cloneProjectData}\n          />\n        );\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div className=\"cf vh-minus-122-ns h-100 pr0-l\">\n      <div className=\"fl pt3 cf w-100\">\n        <h2 className=\"f2 fw6 mt2 mb3 ttu barlow-condensed blue-dark\">\n          <FormattedMessage {...messages.createProject} />\n        </h2>\n      </div>\n      <div className=\"w-100 h-100-l h-50 pt3 pt0-l fr relative\">\n        <Suspense fallback={<ReactPlaceholder showLoadingAnimation={true} rows={30} delay={300} />}>\n          <ProjectCreationMap\n            metadata={metadata}\n            updateMetadata={updateMetadata}\n            mapObj={mapObj}\n            setMapObj={setMapObj}\n            step={step}\n            uploadFile={uploadFile}\n            showProjectsAOILayer={showProjectsAOILayer}\n          />\n        </Suspense>\n        {supported() && (\n          <>\n            <div className=\"cf absolute bg-white o-90 top-1 left-1 pa3 mw6\">\n              {cloneFromId && (\n                <p className=\"fw6 pv2 blue-grey\">\n                  <FormattedMessage\n                    {...messages.cloneProject}\n                    values={{ id: cloneFromId, name: cloneProjectName }}\n                  />\n                </p>\n              )}\n              <div className=\"pb2\">{renderCurrentStep()}</div>\n              {err.error === true && <Alert type=\"error\">{err.message}</Alert>}\n              <NavButtons\n                index={step}\n                setStep={setStep}\n                metadata={metadata}\n                mapObj={mapObj}\n                updateMetadata={updateMetadata}\n                maxArea={MAX_AOI_AREA}\n                setErr={setErr}\n                cloneProjectData={cloneProjectData}\n                handleCreate={() => handleCreate(cloneProjectData)}\n              />\n            </div>\n            <div className=\"cf absolute\" style={{ bottom: '3.5rem', left: '0.6rem' }}>\n              <p\n                className={`fl mr2 pa1 f7-ns white ${\n                  metadata.area > MAX_AOI_AREA || metadata.area === 0 ? 'bg-red' : 'bg-green'\n                }`}\n              >\n                <FormattedMessage\n                  {...messages.areaSize}\n                  values={{\n                    area: <FormattedNumber value={metadata.area} unit=\"kilometer\" />,\n                    sq: <sup>2</sup>,\n                  }}\n                />\n              </p>\n              <p className=\"fl bg-blue-light white mr2 pa1 f7-ns\">\n                <FormattedMessage\n                  {...messages.taskNumber}\n                  values={{ n: <FormattedNumber value={metadata.tasksNumber} /> }}\n                />\n              </p>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCreate;\n"],"sourceRoot":""}