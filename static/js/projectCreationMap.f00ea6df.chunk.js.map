{"version":3,"sources":["components/basemapMenu.js","components/projectCreate/projectsAOILayerCheckBox.js","components/projectCreate/projectCreationMap.js"],"names":["BasemapMenu","_ref","map","styles","BASEMAP_OPTIONS","MAPBOX_TOKEN","filter","s","value","basemap","setBasemap","useState","label","_jsx","className","children","style","k","onClick","styleValue","setStyle","handleClick","concat","ProjectsAOILayerCheckBox","isActive","setActive","disabled","isAoiLoading","_Fragment","_jsxs","CheckBoxInput","changeState","FormattedMessage","messages","showProjectsAOILayer","AnimatedLoadingIcon","ReactTooltip","place","disabledAOILayer","enableAOILayer","colorLegend","ProjectStatusLegend","color","TASK_COLOURS","VALIDATED","statusMessages","status_PUBLISHED","MAPPED","status_DRAFT","BADIMAGERY","status_ARCHIVED","_ref2","backgroundColor","mapboxgl","accessToken","setRTLTextPlugin","MAPBOX_RTL_PLUGIN_URL","console","log","ProjectCreationMap","mapObj","setMapObj","metadata","updateMetadata","step","uploadFile","mapRef","React","createRef","locale","useSelector","state","preferences","token","auth","setShowProjectsAOILayer","aoiCanBeActivated","setAOICanBeActivated","existingProjectsList","setExistingProjectsList","setIsAoiLoading","debouncedGetProjectsAOI","useDebouncedCallback","getProjectsAOI","getRootProps","getInputProps","useDropzone","onDrop","noClick","noKeyboard","useEffect","fetchLocalJSONAPI","then","res","mapResults","bounds","getBounds","bbox","_sw","lng","lat","_ne","getSource","setData","clearProjectsAOI","useCallback","featureCollection","useLayoutEffect","supported","Map","container","current","MAP_STYLE","center","zoom","attributionControl","addControl","AttributionControl","compact","MapboxLanguage","defaultLanguage","substr","ScaleControl","unit","MapboxGeocoder","marker","collapsed","language","remove","addMapLayers","undefined","addSource","type","data","addLayer","id","source","paint","CHART_COLOURS","orange","colorByStatus","noop","someResultsReady","features","length","mapReadyProjectsReady","isStyleLoaded","projectsReadyMapLoading","mapboxLayerDefn","on","event","NavigationControl","draw","geom","area","getZoom","getAll","taskGrid","ref","WebglUnsupported"],"mappings":"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","file":"static/js/projectCreationMap.f00ea6df.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { MAPBOX_TOKEN, BASEMAP_OPTIONS } from '../config';\n\nexport const BasemapMenu = ({ map }) => {\n  // Remove elements that require mapbox token;\n  let styles = BASEMAP_OPTIONS;\n  if (!MAPBOX_TOKEN) {\n    styles = BASEMAP_OPTIONS.filter((s) => typeof s.value === 'object');\n  }\n\n  const [basemap, setBasemap] = useState(styles[0].label);\n\n  const handleClick = (style) => {\n    let styleValue = style.value;\n\n    if (typeof style.value === 'string') {\n      styleValue = 'mapbox://styles/mapbox/' + style.value;\n    }\n    map.setStyle(styleValue);\n    setBasemap(style.label);\n  };\n\n  return (\n    <div className=\"bg-white blue-dark flex mt2 ml2 f7 fr br1 shadow-1\">\n      {styles.map((style, k) => {\n        return (\n          <div\n            key={k}\n            onClick={() => handleClick(style)}\n            className={`ttc pv2 ph3 pointer link + ${\n              basemap === style.label ? 'bg-grey-light fw6' : ''\n            }`}\n          >\n            {style.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import { CheckBoxInput } from '../formInputs';\nimport { FormattedMessage } from 'react-intl';\nimport ReactTooltip from 'react-tooltip';\n\nimport messages from './messages';\nimport statusMessages from '../projectDetail/messages';\nimport { TASK_COLOURS } from '../../config';\nimport { AnimatedLoadingIcon } from '../button';\n\nexport const ProjectsAOILayerCheckBox = ({ isActive, setActive, disabled, isAoiLoading }) => {\n  return (\n    <>\n      <div className=\"bg-white fl dib pv1 ph2 blue-dark mt2 mh2 f7 br1 shadow-1\">\n        <CheckBoxInput\n          isActive={isActive}\n          disabled={disabled}\n          changeState={() => setActive(!isActive)}\n          className=\"dib mr2 v-mid\"\n        />\n        <span className=\"di v-mid\" data-tip>\n          <FormattedMessage {...messages.showProjectsAOILayer} />\n        </span>\n        <span className=\"ml1\">{isAoiLoading && <AnimatedLoadingIcon />}</span>\n        <ReactTooltip place=\"bottom\">\n          {disabled ? (\n            <FormattedMessage {...messages.disabledAOILayer} />\n          ) : (\n            <div>\n              <div className=\"db\">\n                <FormattedMessage {...messages.enableAOILayer} />\n              </div>\n              <div className=\"db pt2 pb1\">\n                <FormattedMessage {...messages.colorLegend} />\n              </div>\n              <div className=\"db\">\n                <ProjectStatusLegend color={TASK_COLOURS.VALIDATED} />\n                <FormattedMessage {...statusMessages.status_PUBLISHED} />\n              </div>\n              <div className=\"db\">\n                <ProjectStatusLegend color={TASK_COLOURS.MAPPED} />\n                <FormattedMessage {...statusMessages.status_DRAFT} />\n              </div>\n              <div className=\"db\">\n                <ProjectStatusLegend color={TASK_COLOURS.BADIMAGERY} />\n                <FormattedMessage {...statusMessages.status_ARCHIVED} />\n              </div>\n            </div>\n          )}\n        </ReactTooltip>\n      </div>\n    </>\n  );\n};\n\nconst ProjectStatusLegend = ({ color }) => (\n  <span style={{ backgroundColor: color }} className=\"h1 w1 dib mr2\"></span>\n);\n","import React, { useLayoutEffect, useEffect, useCallback, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { featureCollection } from '@turf/helpers';\nimport MapboxLanguage from '@mapbox/mapbox-gl-language';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport { useDropzone } from 'react-dropzone';\nimport { mapboxLayerDefn } from '../projects/projectsMap';\n\nimport {\n  MAPBOX_TOKEN,\n  MAP_STYLE,\n  CHART_COLOURS,\n  MAPBOX_RTL_PLUGIN_URL,\n  TASK_COLOURS,\n} from '../../config';\nimport { fetchLocalJSONAPI } from '../../network/genericJSONRequest';\nimport { useDebouncedCallback } from '../../hooks/UseThrottle';\nimport { BasemapMenu } from '../basemapMenu';\nimport { ProjectsAOILayerCheckBox } from './projectsAOILayerCheckBox';\nimport WebglUnsupported from '../webglUnsupported';\n\nmapboxgl.accessToken = MAPBOX_TOKEN;\ntry {\n  mapboxgl.setRTLTextPlugin(MAPBOX_RTL_PLUGIN_URL);\n} catch {\n  console.log('RTLTextPlugin is loaded');\n}\n\nconst ProjectCreationMap = ({ mapObj, setMapObj, metadata, updateMetadata, step, uploadFile }) => {\n  const mapRef = React.createRef();\n  const locale = useSelector((state) => state.preferences['locale']);\n  const token = useSelector((state) => state.auth.token);\n  const [showProjectsAOILayer, setShowProjectsAOILayer] = useState(true);\n  const [aoiCanBeActivated, setAOICanBeActivated] = useState(false);\n  const [existingProjectsList, setExistingProjectsList] = useState([]);\n  const [isAoiLoading, setIsAoiLoading] = useState(false);\n  const [debouncedGetProjectsAOI] = useDebouncedCallback(() => getProjectsAOI(), 1500);\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: step === 1 ? uploadFile : () => {}, // drag&drop is activated only on the first step\n    noClick: true,\n    noKeyboard: true,\n  });\n  const minZoomLevelToAOIVisualization = 9;\n\n  useEffect(() => {\n    fetchLocalJSONAPI('projects/').then((res) => setExistingProjectsList(res.mapResults));\n  }, []);\n\n  const getProjectsAOI = () => {\n    if (aoiCanBeActivated && showProjectsAOILayer && step === 1) {\n      setIsAoiLoading(true);\n      let bounds = mapObj.map.getBounds();\n      let bbox = `${bounds._sw.lng},${bounds._sw.lat},${bounds._ne.lng},${bounds._ne.lat}`;\n      fetchLocalJSONAPI(`projects/queries/bbox/?bbox=${bbox}&srid=4326`, token).then((res) => {\n        mapObj.map.getSource('otherProjects').setData(res);\n        setIsAoiLoading(false);\n      });\n    }\n  };\n\n  const clearProjectsAOI = useCallback(() => {\n    if (mapObj && mapObj.map && mapObj.map.getSource('otherProjects')) {\n      mapObj.map.getSource('otherProjects').setData(featureCollection([]));\n    }\n  }, [mapObj]);\n\n  useEffect(() => {\n    if (showProjectsAOILayer && step === 1) {\n      debouncedGetProjectsAOI();\n    } else {\n      clearProjectsAOI();\n    }\n  }, [showProjectsAOILayer, debouncedGetProjectsAOI, clearProjectsAOI, step]);\n\n  useLayoutEffect(() => {\n    if (!mapboxgl.supported()) return;\n    const map = new mapboxgl.Map({\n      container: mapRef.current,\n      style: MAP_STYLE,\n      center: [0, 0],\n      zoom: 1.3,\n      attributionControl: false,\n    })\n      .addControl(new mapboxgl.AttributionControl({ compact: false }))\n      .addControl(new MapboxLanguage({ defaultLanguage: locale.substr(0, 2) || 'en' }))\n      .addControl(new mapboxgl.ScaleControl({ unit: 'metric' }));\n    if (MAPBOX_TOKEN) {\n      map.addControl(\n        new MapboxGeocoder({\n          accessToken: MAPBOX_TOKEN,\n          mapboxgl: mapboxgl,\n          marker: false,\n          collapsed: true,\n          language: locale.substr(0, 2) || 'en',\n        }),\n        'top-right',\n      );\n    }\n\n    setMapObj({ ...mapObj, map: map });\n    return () => {\n      mapObj.map && mapObj.map.remove();\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const addMapLayers = (map) => {\n    if (map.getSource('aoi') === undefined) {\n      map.addSource('aoi', {\n        type: 'geojson',\n        data: featureCollection([]),\n      });\n      map.addLayer({\n        id: 'aoi',\n        type: 'fill',\n        source: 'aoi',\n        paint: {\n          'fill-color': CHART_COLOURS.orange,\n          'fill-outline-color': '#929db3',\n          'fill-opacity': 0.3,\n        },\n      });\n    }\n\n    if (map.getSource('grid') === undefined) {\n      map.addSource('grid', {\n        type: 'geojson',\n        data: featureCollection([]),\n      });\n      map.addLayer({\n        id: 'grid',\n        type: 'fill',\n        source: 'grid',\n        paint: {\n          'fill-color': '#68707f',\n          'fill-outline-color': '#00f',\n          'fill-opacity': 0.3,\n        },\n      });\n    }\n\n    if (map.getSource('tiny-tasks') === undefined) {\n      map.addSource('tiny-tasks', {\n        type: 'geojson',\n        data: featureCollection([]),\n      });\n      map.addLayer({\n        id: 'tiny-tasks',\n        type: 'fill',\n        source: 'tiny-tasks',\n        paint: {\n          'fill-color': '#f0f',\n          'fill-outline-color': '#f0f',\n          'fill-opacity': 0.3,\n        },\n      });\n    }\n    if (map.getSource('otherProjects') === undefined) {\n      const colorByStatus = [\n        'match',\n        ['get', 'projectStatus'],\n        'DRAFT',\n        TASK_COLOURS.MAPPED,\n        'PUBLISHED',\n        TASK_COLOURS.VALIDATED,\n        'ARCHIVED',\n        TASK_COLOURS.BADIMAGERY,\n        'rgba(0,0,0,0)', // fallback option required by mapbox-gl\n      ];\n      map.addSource('otherProjects', {\n        type: 'geojson',\n        data: featureCollection([]),\n      });\n      map.addLayer({\n        id: 'otherProjectsLine',\n        type: 'line',\n        source: 'otherProjects',\n        paint: {\n          'line-color': colorByStatus,\n          'line-width': 2,\n          'line-opacity': 1,\n        },\n      });\n      map.addLayer({\n        id: 'otherProjectsFill',\n        type: 'fill',\n        source: 'otherProjects',\n        paint: {\n          'fill-color': colorByStatus,\n          'fill-opacity': ['match', ['get', 'projectStatus'], 'PUBLISHED', 0.1, 0.3],\n        },\n      });\n    }\n  };\n\n  const noop = () => {};\n\n  useLayoutEffect(() => {\n    /* docs: https://docs.mapbox.com/mapbox-gl-js/example/cluster/ */\n    const { map } = mapObj;\n\n    const someResultsReady =\n      existingProjectsList &&\n      existingProjectsList.features &&\n      existingProjectsList.features.length > 0;\n\n    const mapReadyProjectsReady =\n      map !== null &&\n      map.isStyleLoaded() &&\n      map.getSource('projects') === undefined &&\n      someResultsReady;\n    const projectsReadyMapLoading =\n      map !== null &&\n      !map.isStyleLoaded() &&\n      map.getSource('projects') === undefined &&\n      someResultsReady;\n\n    /* set up style/sources for the map, either immediately or on base load */\n    if (mapReadyProjectsReady) {\n      mapboxLayerDefn(map, existingProjectsList, noop, true);\n    } else if (projectsReadyMapLoading) {\n      map.on('load', () => mapboxLayerDefn(map, existingProjectsList, noop, true));\n    }\n\n    /* refill the source on existingProjectsList changes */\n    if (map !== null && map.getSource('projects') !== undefined && someResultsReady) {\n      map.getSource('projects').setData(existingProjectsList);\n    }\n  }, [mapObj, existingProjectsList]);\n\n  useLayoutEffect(() => {\n    if (mapObj.map !== null && mapboxgl.supported()) {\n      mapObj.map.on('moveend', (event) => {\n        debouncedGetProjectsAOI();\n      });\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (mapObj.map !== null && mapboxgl.supported()) {\n      mapObj.map.on('load', () => {\n        mapObj.map.addControl(new mapboxgl.NavigationControl());\n        mapObj.map.addControl(mapObj.draw);\n        addMapLayers(mapObj.map);\n      });\n\n      // Remove area and geometry when aoi is deleted.\n      mapObj.map.on('draw.delete', (event) => {\n        updateMetadata({ ...metadata, geom: null, area: 0 });\n      });\n      // enable disable the project AOI visualization checkbox\n      mapObj.map.on('zoomend', (event) => {\n        if (mapObj.map.getZoom() < minZoomLevelToAOIVisualization) {\n          setAOICanBeActivated(false);\n        } else {\n          setAOICanBeActivated(true);\n        }\n      });\n\n      mapObj.map.on('style.load', (event) => {\n        if (!MAPBOX_TOKEN) {\n          return;\n        }\n        addMapLayers(mapObj.map);\n        const features = mapObj.draw.getAll();\n        if (features.features.length === 0 && mapObj.map.getSource('aoi') !== undefined) {\n          mapObj.map.getSource('aoi').setData(metadata.geom);\n        }\n\n        if (metadata.taskGrid && step !== 1 && mapObj.map.getSource('grid') !== undefined) {\n          mapObj.map.getSource('grid').setData(metadata.taskGrid);\n        } else {\n          mapObj.map.getSource('grid') &&\n            mapObj.map.getSource('grid').setData(featureCollection([]));\n        }\n      });\n    }\n  }, [mapObj, metadata, updateMetadata, step]);\n\n  if (!mapboxgl.supported()) {\n    return <WebglUnsupported className=\"vh-50 h-100-l w-100\" />;\n  } else {\n    return (\n      <div className=\"w-100 h-100-l relative\" {...getRootProps()}>\n        <div className=\"absolute top-0 right-0 z-5 mr2\">\n          {step === 1 && (\n            <ProjectsAOILayerCheckBox\n              isActive={showProjectsAOILayer}\n              setActive={setShowProjectsAOILayer}\n              disabled={!aoiCanBeActivated}\n              isAoiLoading={isAoiLoading}\n            />\n          )}\n          <BasemapMenu map={mapObj.map} />\n          <input className=\"dn\" {...getInputProps()} />\n        </div>\n        <div id=\"project-creation-map\" className=\"vh-50 h-100-l w-100\" ref={mapRef}></div>\n      </div>\n    );\n  }\n};\n\nexport default ProjectCreationMap;\n"],"sourceRoot":""}