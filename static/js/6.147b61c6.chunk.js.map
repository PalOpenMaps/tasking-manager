{"version":3,"sources":["components/projectCreate/messages.js","components/projectCreate/setTaskSizes.js","components/projectCreate/setAOI.js","hooks/UseGeomContainsMultiplePolygons.js","components/projectCreate/projectCreationMap.js","components/projectCreate/trimProject.js","components/projectCreate/navButtons.js","components/projectCreate/review.js","components/projectCreate/index.js"],"names":["defineMessages","createProject","id","defaultMessage","cloneProject","clone","areaSize","areaOverLimitError","taskNumber","step1","step2","step3","step4","name","creationFailed","create","reviewTaskNumberMessage","task","tasks","trimTasksDescriptionLine1","trimTasksDescriptionLine2","trimToAOI","taskSizes","smaller","larger","invalidFile","unsupportedGeom","noFeatureCollection","closedLinestring","fileSize","splitTaskDescription","reset","taskNumberMessage","taskAreaMessage","splitByDrawing","splitByClicking","uploadError","backToPrevious","next","trim","draw","uploadFile","deleteArea","arbitraryTasks","drawDescription","importDescription","option1","option2","degrees2meters","lon","lat","x","y","Math","log","tan","PI","meters2degress","atan","exp","createTaskFeature_","step","zoomLevel","xmax","MAXRESOLUTION","ymax","minlnglat","maxlnglat","properties","zoom","isSquare","stepBbox","poly","bboxPolygon","multiPolygon","geometry","coordinates","makeGrid","geom","mask","geomBbox","bbox","minxy","maxxy","createTaskGrid","areaOfInterestExtent","xmin","ceil","ymin","floor","pow","xminstep","parseInt","xmaxstep","yminstep","ymaxstep","taskFeatures","taskFeature","push","featureCollection","splitTaskGrid","taskGrid","newTaskGrid","features","forEach","f","polygon","intersect","g","SetTaskSizes","_ref","metadata","mapObj","updateMetadata","splitHandler","useCallback","event","map","getSource","_data","tempTaskGrid","transformScale","tasksNo","length","smallerSize","squareGrid","largerSize","useLayoutEffect","addLayer","off","buttonStyle","React","createElement","Fragment","className","FormattedMessage","messages","role","Button","onClick","concat","splitBbox","on","getCanvas","style","cursor","splitPolygon","once","delete","changeMode","resetGrid","Object","assign","values","n","area","toFixed","sq","tj","require","osmtogeojson","shp","SetAOI","setErr","containsMultiplePolygons","setContainsMultiplePolygons","useState","useEffect","type","useContainsMultiplePolygons","setDataGeom","display","fitBounds","padding","geomArea","grid","verifyAndSetData","err","code","message","supportedGeoms","e","validateFeature","includes","coords","JSON","stringify","lineToPolygon","deleteHandler","error","getAll","getLayer","removeLayer","removeSource","drawHandler","updateArea","for","onChange","file","target","files","size","MAX_FILESIZE","format","split","toLowerCase","fileReader","FileReader","onload","parse","result","kml","DOMParser","parseFromString","osm","xml","then","readFile","readAsArrayBuffer","readAsText","SwitchToggle","label","labelPosition","isChecked","mapboxgl","accessToken","MAPBOX_TOKEN","setRTLTextPlugin","MAPBOX_RTL_PLUGIN_URL","console","BasemapMenu","styles","BASEMAP_OPTIONS","filter","s","value","basemap","setBasemap","styleValue","setStyle","handleClick","ProjectCreationMap","_ref2","setMapObj","mapRef","createRef","locale","useSelector","state","preferences","Map","container","current","MAP_STYLE","center","attributionControl","addControl","AttributionControl","compact","MapboxLanguage","defaultLanguage","substr","ScaleControl","unit","remove","NavigationControl","ref","TrimProject","token","auth","get","clipStatus","setClipStatus","defaultChecked","clipProject","clip","body","areaOfInterest","clipToAoi","pushToLocalJSONAPI","NavButtons","props","index","prevStep","setStep","clearParamsStep","resp","maxArea","nextStep","validateStep","Review","projectId","cloneProjectData","setError","projectName","preventDefault","handleCreate","store","dispatch","projectParams","cloneFromProjectId","res","navigate","catch","MapboxDraw","aoiPaintOptions","taskGridPaintOptions","layerName","data","options","source","paint","AlertMessage","AlertIcon","height","width","ProjectCreate","cloneFromId","setCloneFromId","useQueryParam","NumberParam","cloneProjectName","setCloneProjectName","fetchCloneProjectInfo","async","fetchLocalJSONAPI","projectInfo","isNaN","Number","MAX_AOI_AREA","displayControlsDefault","Redirect","to","noThrow","renderCurrentStep","bottom","left","FormattedNumber"],"mappings":"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","file":"static/js/6.147b61c6.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\n/**\n * Internationalized messages for use on project creation.\n */\nexport default defineMessages({\n  createProject: {\n    id: 'management.projects.create.title',\n    defaultMessage: 'Create project',\n  },\n  cloneProject: {\n    id: 'management.projects.clone.message',\n    defaultMessage: 'The new project will be a clone of the project #{id} ({name}).',\n  },\n  clone: {\n    id: 'management.projects.create.clone',\n    defaultMessage: 'Clone',\n  },\n  areaSize: {\n    id: 'management.projects.create.area_size',\n    defaultMessage: 'Area size: {area} km{sq}',\n  },\n  areaOverLimitError: {\n    id: 'management.projects.create.area_error',\n    defaultMessage: 'Project area is higher than {n} squared kilometers.',\n  },\n  taskNumber: {\n    id: 'management.projects.create.tasks',\n    defaultMessage: 'Number of tasks: {n}',\n  },\n  step1: {\n    id: 'management.projects.create.steps.1',\n    defaultMessage: 'Step 1: define area',\n  },\n  step2: {\n    id: 'management.projects.create.steps.2',\n    defaultMessage: 'Step 2: set tasks sizes',\n  },\n  step3: {\n    id: 'management.projects.create.steps.3',\n    defaultMessage: 'Step 3: trim task grid',\n  },\n  step4: {\n    id: 'management.projects.create.steps.4',\n    defaultMessage: 'Step 4: review',\n  },\n  name: {\n    id: 'management.projects.create.review_tasks.name',\n    defaultMessage: 'Name',\n  },\n  creationFailed: {\n    id: 'management.projects.create.review_tasks.failure.message',\n    defaultMessage: 'It was not possible to save your project due to an error: {error}',\n  },\n  create: {\n    id: 'management.projects.create.review_tasks.button.create',\n    defaultMessage: 'Create',\n  },\n  reviewTaskNumberMessage: {\n    id: 'management.projects.create.review_tasks.number',\n    defaultMessage: 'Your project will be created with {n} tasks.',\n  },\n  task: {\n    id: 'management.projects.create.review_tasks.task',\n    defaultMessage: 'task',\n  },\n  tasks: {\n    id: 'management.projects.create.review_tasks.tasks',\n    defaultMessage: 'tasks',\n  },\n  trimTasksDescriptionLine1: {\n    id: 'management.projects.create.trim_tasks.description.1',\n    defaultMessage: 'Trim the task grid to the area of interest (optional).',\n  },\n  trimTasksDescriptionLine2: {\n    id: 'management.projects.create.trim_tasks.description.2',\n    defaultMessage:\n      'You can keep the current tasks or trim the area for your project. This can take some time to execute.',\n  },\n  trimToAOI: {\n    id: 'management.projects.create.trim_tasks.trim_to_aoi',\n    defaultMessage: 'Trim the tasks to define the exact Area of Interest for mapping.',\n  },\n  taskSizes: {\n    id: 'management.projects.create.task_sizes.description',\n    defaultMessage: 'General task size',\n  },\n  smaller: {\n    id: 'management.projects.create.task_sizes.smaller',\n    defaultMessage: 'Smaller',\n  },\n  larger: {\n    id: 'management.projects.create.task_sizes.larger',\n    defaultMessage: 'Larger',\n  },\n  invalidFile: {\n    id: 'management.projects.create.errors.invalid',\n    defaultMessage:\n      'It was not possible to read the geometries on the file. Verify it and upload again.',\n  },\n  unsupportedGeom: {\n    id: 'management.projects.create.errors.unsupported_geom',\n    defaultMessage: 'Unsupported geometry type {geometry}',\n  },\n  noFeatureCollection: {\n    id: 'management.projects.create.errors.no_featurecollection',\n    defaultMessage: 'type field is not FeatureCollection',\n  },\n  closedLinestring: {\n    id: 'management.projects.create.errors.closed_linestring',\n    defaultMessage: 'Points do not form a closed linestring',\n  },\n  fileSize: {\n    id: 'management.projects.create.errors.fileSize',\n    defaultMessage:\n      'We only accept files up to {fileSize} MB. Please reduce the size of your file and try again.',\n  },\n  splitTaskDescription: {\n    id: 'management.projects.create.split_task.description',\n    defaultMessage:\n      'Make tasks smaller by clicking on specific tasks or drawing an area on the map.',\n  },\n  reset: {\n    id: 'management.projects.create.reset.button',\n    defaultMessage: 'Reset',\n  },\n  taskNumberMessage: {\n    id: 'management.projects.create.split.tasks.number',\n    defaultMessage: 'A new project will be created with {n} tasks.',\n  },\n  taskAreaMessage: {\n    id: 'management.projects.create.split.tasks.area',\n    defaultMessage: 'The size of each task is approximately {area} km{sq}.',\n  },\n  splitByDrawing: {\n    id: 'management.projects.create.split_task.draw.button',\n    defaultMessage: 'Draw area to split',\n  },\n  splitByClicking: {\n    id: 'management.projects.create.split_task.click.button',\n    defaultMessage: 'Click to split',\n  },\n  uploadError: {\n    id: 'management.projects.create.upload_file.error',\n    defaultMessage: 'Error when importing geometry. Verify if the file you uploaded is correct.',\n  },\n  backToPrevious: {\n    id: 'management.projects.create.button.back',\n    defaultMessage: 'Back to previous',\n  },\n  next: {\n    id: 'management.projects.create.button.next',\n    defaultMessage: 'Next',\n  },\n  trim: {\n    id: 'management.projects.create.button.trim',\n    defaultMessage: 'Trim',\n  },\n  draw: {\n    id: 'management.projects.create.button.draw',\n    defaultMessage: 'Draw',\n  },\n  uploadFile: {\n    id: 'management.projects.create.button.upload_file',\n    defaultMessage: 'Upload file',\n  },\n  deleteArea: {\n    id: 'management.projects.create.button.delete_area',\n    defaultMessage: 'Delete area',\n  },\n  arbitraryTasks: {\n    id: 'management.projects.create.arbitrary_tasks',\n    defaultMessage: 'Set tasks using uploaded polygons',\n  },\n  drawDescription: {\n    id: 'management.projects.create.draw.description',\n    defaultMessage: 'Draw the Area of Interest on the map.',\n  },\n  importDescription: {\n    id: 'management.projects.create.upload.description',\n    defaultMessage: 'Import a GeoJSON, KML, OSM or zipped SHP file.',\n  },\n  option1: {\n    id: 'management.projects.create.options.1',\n    defaultMessage: 'Option 1',\n  },\n  option2: {\n    id: 'management.projects.create.options.2',\n    defaultMessage: 'Option 2',\n  },\n});\n","import React, { useLayoutEffect, useCallback } from 'react';\nimport area from '@turf/area';\nimport bbox from '@turf/bbox';\nimport intersect from '@turf/intersect';\nimport transformScale from '@turf/transform-scale';\nimport bboxPolygon from '@turf/bbox-polygon';\nimport { polygon, multiPolygon, featureCollection } from '@turf/helpers';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from './messages';\nimport { Button } from '../button';\nimport { addLayer } from './index';\n\n// Maximum resolution of OSM\nconst MAXRESOLUTION = 156543.0339;\n\n// X/Y axis offset\nconst AXIS_OFFSET = (MAXRESOLUTION * 256) / 2;\n\nconst degrees2meters = (lon, lat) => {\n  const x = (lon * 20037508.34) / 180;\n  let y = Math.log(Math.tan(((90 + lat) * Math.PI) / 360)) / (Math.PI / 180);\n  y = (y * 20037508.34) / 180;\n\n  return [x, y];\n};\n\nconst meters2degress = (x, y) => {\n  const lon = (x * 180) / 20037508.34;\n  //thanks magichim @ github for the correction\n  const lat = (Math.atan(Math.exp((y * Math.PI) / 20037508.34)) * 360) / Math.PI - 90;\n\n  return [lon, lat];\n};\n\nconst createTaskFeature_ = (step, x, y, zoomLevel) => {\n  const xmin = x * step - AXIS_OFFSET;\n  const ymin = y * step - AXIS_OFFSET;\n  const xmax = (x + 1) * step - AXIS_OFFSET;\n  const ymax = (y + 1) * step - AXIS_OFFSET;\n\n  const minlnglat = meters2degress(xmin, ymin);\n  const maxlnglat = meters2degress(xmax, ymax);\n\n  const properties = {\n    x: x,\n    y: y,\n    zoom: zoomLevel,\n    isSquare: true,\n  };\n  const stepBbox = [minlnglat[0], minlnglat[1], maxlnglat[0], maxlnglat[1]];\n  const poly = bboxPolygon(stepBbox);\n\n  return multiPolygon([poly.geometry.coordinates], properties);\n};\n\nconst createTaskGrid = (areaOfInterestExtent, zoomLevel) => {\n  const xmin = Math.ceil(areaOfInterestExtent[0]);\n  const ymin = Math.ceil(areaOfInterestExtent[1]);\n  const xmax = Math.floor(areaOfInterestExtent[2]);\n  const ymax = Math.floor(areaOfInterestExtent[3]);\n\n  // task size (in meters) at the required zoom level\n  const step = AXIS_OFFSET / Math.pow(2, zoomLevel - 1);\n\n  // Calculate the min and max task indices at the required zoom level to cover the whole area of interest\n  const xminstep = parseInt(Math.floor((xmin + AXIS_OFFSET) / step));\n  const xmaxstep = parseInt(Math.ceil((xmax + AXIS_OFFSET) / step));\n  const yminstep = parseInt(Math.floor((ymin + AXIS_OFFSET) / step));\n  const ymaxstep = parseInt(Math.ceil((ymax + AXIS_OFFSET) / step));\n\n  let taskFeatures = [];\n  // Generate an array of task features\n  for (let x = xminstep; x < xmaxstep; x++) {\n    for (let y = yminstep; y < ymaxstep; y++) {\n      let taskFeature = createTaskFeature_(step, x, y, zoomLevel);\n      taskFeatures.push(taskFeature);\n    }\n  }\n\n  return featureCollection(taskFeatures);\n};\n\nexport const makeGrid = (geom, zoom, mask) => {\n  let geomBbox = bbox(geom);\n\n  const minxy = degrees2meters(geomBbox[0], geomBbox[1]);\n  const maxxy = degrees2meters(geomBbox[2], geomBbox[3]);\n\n  geomBbox = [minxy[0], minxy[1], maxxy[0], maxxy[1]];\n\n  const grid = createTaskGrid(geomBbox, zoom);\n\n  return grid;\n};\n\nconst splitTaskGrid = (taskGrid, geom) => {\n  let newTaskGrid = [];\n  taskGrid.features.forEach(f => {\n    let poly = polygon(f.geometry.coordinates[0]);\n    let contains = intersect(geom, poly);\n    if (contains === null) {\n      newTaskGrid.push(f);\n    } else {\n      const splitGrid = makeGrid(f, f.properties.zoom + 1, {});\n      splitGrid.features.forEach(g => {\n        newTaskGrid.push(g);\n      });\n    }\n  });\n\n  return newTaskGrid;\n};\n\nexport default function SetTaskSizes({ metadata, mapObj, updateMetadata }) {\n  const splitHandler = useCallback(\n    event => {\n      const taskGrid = mapObj.map.getSource('grid')._data;\n\n      if (metadata.tempTaskGrid === null) {\n        updateMetadata({ ...metadata, tempTaskGrid: taskGrid });\n      }\n      // Make the geom smaller to avoid borders.\n      const geom = transformScale(event.features[0].geometry, 0.5);\n      const newTaskGrid = splitTaskGrid(taskGrid, geom);\n\n      updateMetadata({\n        ...metadata,\n        taskGrid: featureCollection(newTaskGrid),\n        tasksNo: featureCollection(newTaskGrid).features.length,\n      });\n    },\n    [updateMetadata, metadata, mapObj.map],\n  );\n\n  const splitBbox = () => {\n    mapObj.map.on('mouseenter', 'grid', event => {\n      mapObj.map.getCanvas().style.cursor = 'pointer';\n    });\n    mapObj.map.on('mouseleave', 'grid', event => {\n      mapObj.map.getCanvas().style.cursor = '';\n    });\n    mapObj.map.on('click', 'grid', splitHandler);\n  };\n\n  const splitPolygon = () => {\n    mapObj.map.on('mouseenter', 'grid', event => {\n      mapObj.map.getCanvas().style.cursor = 'crosshair';\n    });\n    mapObj.map.on('mouseleave', 'grid', event => {\n      mapObj.map.getCanvas().style.cursor = '';\n    });\n    mapObj.map.once('draw.create', event => {\n      const taskGrid = mapObj.map.getSource('grid')._data;\n      if (metadata.tempTaskGrid === null) {\n        updateMetadata({ ...metadata, tempTaskGrid: taskGrid });\n      }\n\n      const id = event.features[0].id;\n      mapObj.draw.delete(id);\n\n      const geom = event.features[0].geometry;\n      const newTaskGrid = splitTaskGrid(taskGrid, geom, metadata.zoomLevel);\n\n      updateMetadata({\n        ...metadata,\n        taskGrid: featureCollection(newTaskGrid),\n        tasksNo: featureCollection(newTaskGrid).features.length,\n      });\n    });\n\n    mapObj.draw.changeMode('draw_polygon');\n  };\n\n  const resetGrid = () => {\n    updateMetadata({ ...metadata, taskGrid: metadata.tempTaskGrid });\n  };\n\n  const smallerSize = useCallback(() => {\n    const zoomLevel = metadata.zoomLevel + 1;\n    const squareGrid = makeGrid(metadata.geom, zoomLevel, {});\n    updateMetadata({\n      ...metadata,\n      zoomLevel: zoomLevel,\n      tempTaskGrid: squareGrid,\n      taskGrid: squareGrid,\n      tasksNo: squareGrid.features.length,\n    });\n  }, [metadata, updateMetadata]);\n\n  const largerSize = useCallback(() => {\n    const zoomLevel = metadata.zoomLevel - 1;\n    const squareGrid = makeGrid(metadata.geom, zoomLevel, {});\n    if (zoomLevel > 0) {\n      updateMetadata({\n        ...metadata,\n        zoomLevel: zoomLevel,\n        tempTaskGrid: squareGrid,\n        taskGrid: squareGrid,\n        tasksNo: squareGrid.features.length,\n      });\n    }\n  }, [metadata, updateMetadata]);\n\n  useLayoutEffect(() => {\n    addLayer('grid', metadata.taskGrid, mapObj.map);\n    return () => {\n      mapObj.map.off('click', 'grid', splitHandler);\n    };\n  }, [metadata, mapObj, smallerSize, largerSize, splitHandler]);\n\n  const buttonStyle = 'white bg-blue-dark';\n\n  return (\n    <>\n      <h3 className=\"f3 fw6 mt2 mb3 barlow-condensed blue-dark\">\n        <FormattedMessage {...messages.step2} />\n      </h3>\n      <div>\n        <div>\n          <p>\n            <FormattedMessage {...messages.taskSizes} />\n          </p>\n          <div role=\"group\">\n            <Button onClick={smallerSize} className={`${buttonStyle} mr2`}>\n              <FormattedMessage {...messages.smaller} />\n            </Button>\n            <Button onClick={largerSize} className={buttonStyle}>\n              <FormattedMessage {...messages.larger} />\n            </Button>\n          </div>\n        </div>\n        <div className=\"pt3\">\n          <p>\n            <FormattedMessage {...messages.splitTaskDescription} />\n          </p>\n          <div role=\"group\">\n            <Button className={`${buttonStyle} mr2`} onClick={splitBbox}>\n              <FormattedMessage {...messages.splitByClicking} />\n            </Button>\n            <Button className={buttonStyle} onClick={splitPolygon}>\n              <FormattedMessage {...messages.splitByDrawing} />\n            </Button>\n            <Button className=\"bg-red white db mt2\" onClick={resetGrid}>\n              <FormattedMessage {...messages.reset} />\n            </Button>\n          </div>\n        </div>\n        <p>\n          <FormattedMessage {...messages.taskNumberMessage} values={{ n: metadata.tasksNo || 0 }} />\n        </p>\n        <p>\n          <FormattedMessage\n            {...messages.taskAreaMessage}\n            values={{\n              area: (area(metadata.taskGrid.features[0]) / 1e6).toFixed(2) || 0,\n              sq: <sup>2</sup>,\n            }}\n          />\n        </p>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport area from '@turf/area';\nimport bbox from '@turf/bbox';\nimport { featureCollection } from '@turf/helpers';\nimport lineToPolygon from '@turf/line-to-polygon';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from './messages';\nimport { addLayer } from './index';\nimport { Button } from '../button';\nimport { SwitchToggle } from '../formInputs';\nimport { makeGrid } from './setTaskSizes';\nimport { useContainsMultiplePolygons } from '../../hooks/UseGeomContainsMultiplePolygons';\nimport { MAX_FILESIZE } from '../../config';\n\nvar tj = require('@mapbox/togeojson');\nvar osmtogeojson = require('osmtogeojson');\nvar shp = require('shpjs');\n\nexport default function SetAOI({ mapObj, metadata, updateMetadata, setErr }) {\n  const { containsMultiplePolygons } = useContainsMultiplePolygons(metadata.geom);\n  const layer_name = 'aoi';\n\n  const setDataGeom = (geom, display) => {\n    mapObj.map.fitBounds(bbox(geom), { padding: 20 });\n    const geomArea = area(geom) / 1e6;\n    const zoomLevel = 11;\n    const grid = makeGrid(geom, zoomLevel, {});\n    updateMetadata({\n      ...metadata,\n      geom: geom,\n      area: geomArea.toFixed(2),\n      zoomLevel: zoomLevel,\n      taskGrid: grid,\n      tempTaskGrid: grid,\n    });\n\n    if (display === true) {\n      addLayer('aoi', geom, mapObj.map);\n    }\n  };\n\n  const validateFeature = (e, supportedGeoms, err) => {\n    if (supportedGeoms.includes(e.geometry.type) === false) {\n      err.message = (\n        <FormattedMessage {...messages.unsupportedGeom} values={{ geometry: e.geometry.type }} />\n      );\n\n      throw err;\n    }\n\n    // Transform lineString to polygon\n    if (e.geometry.type === 'LineString') {\n      const coords = e.geometry.coordinates;\n      if (JSON.stringify(coords[0]) !== JSON.stringify(coords[coords.length - 1])) {\n        err.message = <FormattedMessage {...messages.closedLinestring} />;\n        throw err;\n      }\n      const polygon = lineToPolygon(e);\n      return polygon;\n    }\n\n    return e;\n  };\n\n  const verifyAndSetData = (event) => {\n    let err = { code: 403, message: null };\n\n    try {\n      if (event.type !== 'FeatureCollection') {\n        err.message = <FormattedMessage {...messages.noFeatureCollection} />;\n        throw err;\n      }\n      // Validate geometry for each feature.\n      const supportedGeoms = ['Polygon', 'MultiPolygon', 'LineString'];\n      const features = event.features.map((e) => validateFeature(e, supportedGeoms, err));\n\n      event.features = features;\n      setDataGeom(event, true);\n    } catch (e) {\n      deleteHandler();\n      setErr({ error: true, message: e.message });\n    }\n  };\n\n  const uploadFile = (event) => {\n    let files = event.target.files;\n    let file = files[0];\n    if (!file) {\n      return null;\n    }\n    if (file.size >= MAX_FILESIZE) {\n      setErr({\n        error: true,\n        message: (\n          <FormattedMessage {...messages.fileSize} values={{ fileSize: MAX_FILESIZE / 1000000 }} />\n        ),\n      });\n      return null;\n    }\n\n    const format = file.name.split('.')[1].toLowerCase();\n\n    const readFile = (e) => {\n      let geom = null;\n      switch (format) {\n        case 'json':\n        case 'geojson':\n          geom = JSON.parse(e.target.result);\n          break;\n        case 'kml':\n          let kml = new DOMParser().parseFromString(e.target.result, 'text/xml');\n          geom = tj.kml(kml);\n          break;\n        case 'osm':\n          let osm = new DOMParser().parseFromString(e.target.result, 'text/xml');\n          geom = osmtogeojson(osm);\n          break;\n        case 'xml':\n          let xml = new DOMParser().parseFromString(e.target.result, 'text/xml');\n          geom = osmtogeojson(xml);\n          break;\n        case 'zip':\n          shp(e.target.result).then(function (geom) {\n            verifyAndSetData(geom);\n          });\n          break;\n        default:\n          break;\n      }\n      if (format !== 'zip') {\n        verifyAndSetData(geom);\n      }\n    };\n\n    let fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      try {\n        readFile(e);\n      } catch (err) {\n        setErr({\n          error: true,\n          message: <FormattedMessage {...messages.invalidFile} />,\n        });\n      }\n    };\n\n    if (format === 'zip') {\n      fileReader.readAsArrayBuffer(file);\n    } else {\n      fileReader.readAsText(file);\n    }\n  };\n\n  const deleteHandler = () => {\n    const features = mapObj.draw.getAll();\n    if (features.features.length > 0) {\n      const id = features.features[0].id;\n      mapObj.draw.delete(id);\n    }\n\n    if (mapObj.map.getLayer(layer_name)) {\n      mapObj.map.removeLayer(layer_name);\n    }\n    if (mapObj.map.getSource(layer_name)) {\n      mapObj.map.removeSource(layer_name);\n    }\n    updateMetadata({ ...metadata, area: 0, geom: null });\n  };\n\n  const drawHandler = () => {\n    const updateArea = (event) => {\n      const features = mapObj.draw.getAll();\n      if (features.features.length > 1) {\n        const id = features.features[0].id;\n        mapObj.draw.delete(id);\n      }\n\n      // Validate area first.\n      const geom = featureCollection(event.features);\n      setDataGeom(geom, false);\n    };\n\n    mapObj.map.on('draw.update', updateArea);\n    mapObj.map.once('draw.create', updateArea);\n    mapObj.draw.changeMode('draw_polygon');\n  };\n\n  return (\n    <>\n      <h3 className=\"f3 fw6 mt2 mb3 ttu barlow-condensed blue-dark\">\n        <FormattedMessage {...messages.step1} />\n      </h3>\n      <div className=\"pb4\">\n        <h3>\n          <FormattedMessage {...messages.option1} />:\n        </h3>\n        <p>\n          <FormattedMessage {...messages.drawDescription} />\n        </p>\n        <Button className=\"bg-blue-dark white\" onClick={drawHandler}>\n          <FormattedMessage {...messages.draw} />\n        </Button>\n      </div>\n\n      <div className=\"pb4\">\n        <h3>\n          <FormattedMessage {...messages.option2} />:\n        </h3>\n        <p>\n          <FormattedMessage {...messages.importDescription} />\n        </p>\n        <div className=\"pt3\">\n          <label\n            for=\"file-upload\"\n            className=\"bg-blue-dark white br1 f5 bn pointer\"\n            style={{ padding: '.75rem 1.5rem' }}\n          >\n            <FormattedMessage {...messages.uploadFile} />\n          </label>\n          <input onChange={uploadFile} style={{ display: 'none' }} id=\"file-upload\" type=\"file\" />\n        </div>\n      </div>\n      <div className=\"pb2\">\n        {containsMultiplePolygons && (\n          <SwitchToggle\n            label={<FormattedMessage {...messages.arbitraryTasks} />}\n            labelPosition=\"right\"\n            isChecked={metadata.arbitraryTasks}\n            onChange={() =>\n              updateMetadata({ ...metadata, arbitraryTasks: !metadata.arbitraryTasks })\n            }\n          />\n        )}\n      </div>\n      {metadata.geom && (\n        <div className=\"pt4\">\n          <Button className=\"bg-red white\" onClick={deleteHandler}>\n            <FormattedMessage {...messages.deleteArea} />\n          </Button>\n        </div>\n      )}\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nexport function useContainsMultiplePolygons(geom) {\n  const [containsMultiplePolygons, setContainsMultiplePolygons] = useState(false);\n  useEffect(() => {\n    if (geom && geom.features && geom.features.length) {\n      if (geom.features.length > 1) setContainsMultiplePolygons(true);\n      if (geom.features.length === 1 && geom.features[0].geometry.type === 'MultiPolygon') {\n        setContainsMultiplePolygons(true);\n      }\n    }\n    if (geom === null || (geom.features && geom.features.length === 0)) {\n      setContainsMultiplePolygons(false);\n    }\n  }, [setContainsMultiplePolygons, geom]);\n  return { containsMultiplePolygons };\n}\n","import React, { useLayoutEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport MapboxLanguage from '@mapbox/mapbox-gl-language';\nimport { addLayer } from './index';\nimport { MAPBOX_TOKEN, BASEMAP_OPTIONS, MAP_STYLE, MAPBOX_RTL_PLUGIN_URL } from '../../config';\n\nmapboxgl.accessToken = MAPBOX_TOKEN;\ntry {\n  mapboxgl.setRTLTextPlugin(MAPBOX_RTL_PLUGIN_URL);\n} catch {\n  console.log('RTLTextPlugin is loaded');\n}\n\nconst BasemapMenu = ({ map }) => {\n  // Remove elements that require mapbox token;\n  let styles = BASEMAP_OPTIONS;\n  if (!MAPBOX_TOKEN) {\n    styles = BASEMAP_OPTIONS.filter((s) => typeof s.value === 'object');\n  }\n\n  const [basemap, setBasemap] = useState(styles[0].label);\n\n  const handleClick = (style) => {\n    let styleValue = style.value;\n\n    if (typeof style.value === 'string') {\n      styleValue = 'mapbox://styles/mapbox/' + style.value;\n    }\n    map.setStyle(styleValue);\n    setBasemap(style.label);\n  };\n\n  return (\n    <div className=\"bg-white blue-dark flex mt2 ml2 f7 br1 shadow-1\">\n      {styles.map((style) => {\n        return (\n          <div\n            onClick={() => handleClick(style)}\n            className={`ttc pv2 ph3 pointer link + ${\n              basemap === style.label ? 'bg-grey-light fw6' : ''\n            }`}\n          >\n            {style.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst ProjectCreationMap = ({ mapObj, setMapObj, metadata, updateMetadata, step }) => {\n  const mapRef = React.createRef();\n  const locale = useSelector((state) => state.preferences['locale']);\n\n  useLayoutEffect(() => {\n    setMapObj({\n      ...mapObj,\n      map: new mapboxgl.Map({\n        container: mapRef.current,\n        style: MAP_STYLE,\n        center: [0, 0],\n        zoom: 1,\n        attributionControl: false,\n      })\n        .addControl(new mapboxgl.AttributionControl({ compact: false }))\n        .addControl(new MapboxLanguage({ defaultLanguage: locale.substr(0, 2) || 'en' }))\n        .addControl(new mapboxgl.ScaleControl({ unit: 'metric' })),\n    });\n\n    return () => {\n      mapObj.map && mapObj.map.remove();\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  useLayoutEffect(() => {\n    if (mapObj.map !== null) {\n      mapObj.map.on('load', () => {\n        mapObj.map.addControl(new mapboxgl.NavigationControl());\n        mapObj.map.addControl(mapObj.draw);\n      });\n\n      // Remove area and geometry when aoi is deleted.\n      mapObj.map.on('draw.delete', (event) => {\n        updateMetadata({ ...metadata, geom: null, area: 0 });\n      });\n\n      mapObj.map.on('style.load', (event) => {\n        if (!MAPBOX_TOKEN) {\n          return;\n        }\n        const features = mapObj.draw.getAll();\n        if (features.features.length === 0) {\n          addLayer('aoi', metadata.geom, mapObj.map);\n        }\n\n        if (metadata.taskGrid && step !== 1) {\n          addLayer('grid', metadata.taskGrid, mapObj.map);\n        } else {\n          mapObj.map.removeLayer('grid');\n        }\n      });\n    }\n  }, [mapObj, metadata, updateMetadata, step]);\n\n  return (\n    <div className=\"w-100 h-100-l relative\">\n      <div className=\"absolute top-0 left-0 z-5\">\n        <BasemapMenu map={mapObj.map} />\n      </div>\n      <div id=\"map\" className=\"vh-50 h-100-l w-100\" ref={mapRef}></div>\n    </div>\n  );\n};\n\nexport { ProjectCreationMap };\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from './messages';\nimport { addLayer } from './index';\nimport { Button } from '../button';\n\nimport { pushToLocalJSONAPI } from '../../network/genericJSONRequest';\n\nconst clipProject = (clip, metadata, map, updateMetadata, token) => {\n  const url = 'projects/actions/intersecting-tiles/';\n  const body = JSON.stringify({\n    areaOfInterest: metadata.geom,\n    clipToAoi: clip,\n    grid: metadata.tempTaskGrid,\n  });\n\n  pushToLocalJSONAPI(url, body, token).then((grid) => {\n    updateMetadata({ ...metadata, tasksNo: grid.features.length, taskGrid: grid });\n  });\n};\n\nexport default function TrimProject({ metadata, mapObj, updateMetadata }) {\n  useEffect(() => {\n    addLayer('grid', metadata.taskGrid, mapObj.map);\n  }, [metadata, mapObj]);\n\n  const token = useSelector((state) => state.auth.get('token'));\n  const [clipStatus, setClipStatus] = useState(false);\n\n  return (\n    <>\n      <h3 className=\"f3 fw6 mt2 mb3 barlow-condensed blue-dark\">\n        <FormattedMessage {...messages.step3} />\n      </h3>\n      <div>\n        <p>\n          <FormattedMessage {...messages.trimTasksDescriptionLine1} />\n        </p>\n        <p>\n          <FormattedMessage {...messages.trimTasksDescriptionLine2} />\n        </p>\n        <input\n          type=\"checkbox\"\n          className=\"v-mid\"\n          defaultChecked={clipStatus}\n          onChange={() => setClipStatus(!clipStatus)}\n        />\n        <span className=\"pl2 v-mid\">\n          <FormattedMessage {...messages.trimToAOI} />\n        </span>\n        <div className=\"pt2\">\n          <Button\n            onClick={() => clipProject(clipStatus, metadata, mapObj.map, updateMetadata, token)}\n            className=\"white bg-blue-dark\"\n          >\n            <FormattedMessage {...messages.trim} />\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { addLayer } from './index';\nimport messages from './messages';\nimport { Button } from '../button';\n\nconst validateStep = props => {\n  switch (props.index) {\n    case 1: // Set Project AOI.\n      if (props.metadata.area >= props.maxArea) {\n        const message = 'Project AOI is higher than 5000 squared kilometers';\n        return { error: true, message: message };\n      } else if (props.metadata.area === 0) {\n        const message = 'Project geometry not set';\n        return { error: true, message: message };\n      } else {\n        const id = props.metadata.geom.features[0].id;\n        props.mapObj.draw.delete(id);\n        addLayer('aoi', props.metadata.geom, props.mapObj.map);\n        props.updateMetadata({\n          ...props.metadata,\n          tasksNo: props.metadata.taskGrid.features.length,\n        });\n      }\n\n      break;\n    case 2: // Set Task grid.\n      const taskGrid = props.mapObj.map.getSource('grid')._data;\n      props.updateMetadata({ ...props.metadata, taskGrid: taskGrid, tempTaskGrid: taskGrid });\n      break;\n    case 3: // Trim Project.\n      break;\n\n    default:\n      return;\n  }\n  let nextStep = props.index + 1;\n\n  // If task is arbitrary. Jump to review.\n  if (props.metadata.arbitraryTasks === true) {\n    nextStep = 4;\n  }\n  props.setStep(nextStep);\n  return { error: false, message: '' };\n};\n\nconst clearParamsStep = props => {\n  switch (props.index) {\n    case 2: //clear Tasks\n      props.mapObj.map.removeLayer('grid');\n      props.updateMetadata({ ...props.metadata, tasksNo: 0});\n      break;\n    case 3:\n      props.updateMetadata({ ...props.metadata, taskGrid: props.metadata.tempTaskGrid });\n      break;\n    default:\n      break;\n  }\n\n  let prevStep = props.index - 1;\n\n  // If task is arbitrary. Jump to review.\n  if (props.metadata.arbitraryTasks === true) {\n    prevStep = 1;\n  }\n  props.setStep(prevStep);\n};\n\nconst NavButtons = props => {\n  const stepHandler = event => {\n    const resp = validateStep(props);\n    props.setErr(resp);\n  };\n\n  return (\n    <div className=\"pt3\">\n      {props.index === 1 ? null : (\n        <Button onClick={() => clearParamsStep(props)} className=\"white bg-red mr3\">\n          <FormattedMessage {...messages.backToPrevious} />\n        </Button>\n      )}\n      {props.index === 4 ? null : (\n        <Button onClick={stepHandler} className=\"white bg-blue-dark\">\n          <FormattedMessage {...messages.next} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default NavButtons;\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { navigate } from '@reach/router';\n\nimport messages from './messages';\nimport { Button } from '../button';\nimport { createProject } from '../../store/actions/project';\nimport { store } from '../../store';\nimport { pushToLocalJSONAPI } from '../../network/genericJSONRequest';\n\nconst handleCreate = (metadata, updateMetadata, projectName, token, cloneProjectData, setError) => {\n  if (!metadata.geom) {\n    setError('Area of interest not provided');\n    return;\n  }\n\n  updateMetadata({ ...metadata, projectName: projectName });\n  store.dispatch(createProject(metadata));\n  let projectParams = {\n    areaOfInterest: metadata.geom,\n    projectName: metadata.projectName,\n    tasks: metadata.taskGrid,\n    arbitraryTasks: metadata.arbitraryTasks,\n  };\n\n  if (cloneProjectData.name !== null) {\n    projectParams.projectName = '';\n    projectParams.cloneFromProjectId = cloneProjectData.id;\n  }\n  pushToLocalJSONAPI('projects/', JSON.stringify(projectParams), token)\n    .then((res) => navigate(`/manage/projects/${res.projectId}`))\n    .catch((e) => setError(e));\n};\n\nexport default function Review({ metadata, updateMetadata, token, projectId, cloneProjectData }) {\n  const [error, setError] = useState(null);\n  const projectName = metadata.projectName;\n\n  const setProjectName = (event) => {\n    event.preventDefault();\n    updateMetadata({ ...metadata, projectName: event.target.value });\n  };\n\n  return (\n    <>\n      <h3 className=\"f3 fw6 mt2 mb3 barlow-condensed blue-dark\">\n        <FormattedMessage {...messages.step4} />\n      </h3>\n      <p className=\"pt2\">\n        <FormattedMessage {...messages.reviewTaskNumberMessage} values={{ n: metadata.tasksNo }} />\n      </p>\n\n      {cloneProjectData.name === null ? (\n        <>\n          <label for=\"name\" className=\"f4 b db mb2 pt3\">\n            <FormattedMessage {...messages.name} />\n          </label>\n          <input\n            onChange={setProjectName}\n            id=\"name\"\n            className=\"input-reset ba b--black-20 pa2 mb2 db w-50\"\n            type=\"text\"\n          />\n        </>\n      ) : null}\n\n      <div className=\"mt3\">\n        <Button\n          onClick={() =>\n            handleCreate(metadata, updateMetadata, projectName, token, cloneProjectData, setError)\n          }\n          className=\"white bg-blue-dark\"\n        >\n          {cloneProjectData.name === null ? (\n            <FormattedMessage {...messages.create} />\n          ) : (\n            <FormattedMessage {...messages.clone} />\n          )}\n        </Button>\n      </div>\n      <div className=\"mt2\">\n        {error && (\n          <span>\n            <FormattedMessage {...messages.creationFailed} values={{ error: error }} />\n          </span>\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { useState, useLayoutEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect } from '@reach/router';\nimport { useQueryParam, NumberParam } from 'use-query-params';\nimport { FormattedMessage, FormattedNumber } from 'react-intl';\n\nimport messages from './messages';\nimport SetAOI from './setAOI';\nimport { ProjectCreationMap } from './projectCreationMap';\nimport SetTaskSizes from './setTaskSizes';\nimport TrimProject from './trimProject';\nimport NavButtons from './navButtons';\nimport Review from './review';\nimport { fetchLocalJSONAPI } from '../../network/genericJSONRequest';\nimport { MAX_AOI_AREA } from '../../config';\nimport { AlertIcon } from '../svgIcons';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\n\nconst MapboxDraw = require('@mapbox/mapbox-gl-draw');\n\nconst aoiPaintOptions = {\n  'fill-color': '#00004d',\n  'fill-opacity': 0.3,\n};\n\nconst taskGridPaintOptions = {\n  'fill-color': '#fff',\n  'fill-outline-color': '#00f',\n  'fill-opacity': 0.5,\n};\n\nexport const addLayer = (layerName, data, map) => {\n  if (map.getLayer(layerName)) {\n    map.removeLayer(layerName);\n  }\n  if (map.getSource(layerName)) {\n    map.removeSource(layerName);\n  }\n\n  let options = aoiPaintOptions;\n  if (layerName === 'grid') {\n    options = taskGridPaintOptions;\n  }\n\n  map.addLayer({\n    id: layerName,\n    type: 'fill',\n    source: {\n      type: 'geojson',\n      data: data,\n    },\n    paint: options,\n  });\n};\n\nconst AlertMessage = ({ err }) => {\n  if (err.error === true) {\n    return (\n      <p className={'w-80 pv2 tc f6 fw6 red ba b--red br1 lh-copy'}>\n        <span className=\"ph1\">\n          <AlertIcon className=\"red mr2\" height=\"15px\" width=\"15px\" />\n          {err.message}\n        </span>\n      </p>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst ProjectCreate = (props) => {\n  const token = useSelector((state) => state.auth.get('token'));\n  // eslint-disable-next-line\n  const [cloneFromId, setCloneFromId] = useQueryParam('cloneFrom', NumberParam);\n  const [step, setStep] = useState(1);\n  const [cloneProjectName, setCloneProjectName] = useState(null);\n  const [err, setErr] = useState({ error: false, message: null });\n\n  const fetchCloneProjectInfo = useCallback(\n    async (cloneFromId) => {\n      const res = await fetchLocalJSONAPI(`projects/${cloneFromId}/`, token);\n      setCloneProjectName(res.projectInfo.name);\n    },\n    [setCloneProjectName, token],\n  );\n\n  useLayoutEffect(() => {\n    if (cloneFromId && !isNaN(Number(cloneFromId))) {\n      fetchCloneProjectInfo(cloneFromId);\n    }\n  }, [cloneFromId, fetchCloneProjectInfo]);\n\n  let cloneProjectData = {\n    id: cloneFromId,\n    name: cloneProjectName,\n  };\n\n  // Project information.\n  const [metadata, updateMetadata] = useState({\n    geom: null,\n    area: 0,\n    tasksNo: 0,\n    taskGrid: null,\n    projectName: '',\n    zoomLevel: 9,\n    tempTaskGrid: null,\n    arbitraryTasks: false,\n  });\n\n  useLayoutEffect(() => {\n    let err = { error: false, message: null };\n    if (metadata.area > MAX_AOI_AREA) {\n      err = {\n        error: true,\n        message: <FormattedMessage {...messages.areaOverLimitError} values={{ n: MAX_AOI_AREA }} />,\n      };\n    }\n\n    setErr(err);\n  }, [metadata]);\n\n  const drawOptions = {\n    displayControlsDefault: false,\n  };\n  const [mapObj, setMapObj] = useState({\n    map: null,\n    draw: new MapboxDraw(drawOptions),\n  });\n\n  if (!token) {\n    return <Redirect to={'/login'} noThrow />;\n  }\n\n  const renderCurrentStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <SetAOI\n            mapObj={mapObj}\n            metadata={metadata}\n            updateMetadata={updateMetadata}\n            setErr={setErr}\n          />\n        );\n      case 2:\n        return <SetTaskSizes mapObj={mapObj} metadata={metadata} updateMetadata={updateMetadata} />;\n      case 3:\n        return <TrimProject mapObj={mapObj} metadata={metadata} updateMetadata={updateMetadata} />;\n      case 4:\n        return (\n          <Review\n            metadata={metadata}\n            updateMetadata={updateMetadata}\n            token={token}\n            cloneProjectData={cloneProjectData}\n          />\n        );\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div className=\"cf vh-minus-122-ns h-100 pr0-l\">\n      <div className=\"fl pt3 w-30-l cf w-100\">\n        <h2 className=\"f2 fw6 mt2 mb3 ttu barlow-condensed blue-dark\">\n          <FormattedMessage {...messages.createProject} />\n        </h2>\n        {cloneFromId && (\n          <p className=\"fw6 pv2 blue-grey\">\n            <FormattedMessage\n              {...messages.cloneProject}\n              values={{ id: cloneFromId, name: cloneProjectName }}\n            />\n          </p>\n        )}\n        {renderCurrentStep()}\n        <AlertMessage err={err} />\n\n        <NavButtons\n          index={step}\n          setStep={setStep}\n          metadata={metadata}\n          mapObj={mapObj}\n          updateMetadata={updateMetadata}\n          maxArea={MAX_AOI_AREA}\n          setErr={setErr}\n        />\n      </div>\n      <div className=\"w-70-l w-100 h-100-l h-50 pt3 pt0-l fr relative\">\n        <ProjectCreationMap\n          metadata={metadata}\n          updateMetadata={updateMetadata}\n          mapObj={mapObj}\n          setMapObj={setMapObj}\n          step={step}\n        />\n        <div className=\"cf absolute\" style={{ bottom: '3.5rem', left: '0.6rem' }}>\n          <p\n            className={`fl mr2 pa1 f7-ns white ${\n              metadata.area > MAX_AOI_AREA || metadata.area === 0 ? 'bg-red' : 'bg-green'\n            }`}\n          >\n            <FormattedMessage\n              {...messages.areaSize}\n              values={{\n                area: <FormattedNumber value={metadata.area} unit=\"kilometer\" />,\n                sq: <sup>2</sup>,\n              }}\n            />\n          </p>\n          <p className=\"fl bg-blue-light white mr2 pa1 f7-ns\">\n            <FormattedMessage\n              {...messages.taskNumber}\n              values={{ n: <FormattedNumber value={metadata.tasksNo} /> }}\n            />\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCreate;\n"],"sourceRoot":""}