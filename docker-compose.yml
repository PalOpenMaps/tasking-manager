# To use this file, run `docker-compose up`.
version: "3.4"

x-backend-config: &backend
  image: hotosm-tasking-manager:backend
  env_file: ${ENV_FILE:-tasking-manager.env}
  depends_on:
    - postgresql
  links:
    - postgresql
  networks:
    - tm-web

services:
  # Main application
  backend:
    <<: *backend
    container_name: tm-backend
    restart: always
    labels:
      - traefik.http.routers.backend.rule=(Host(`127.0.0.1`) || Host(`localhost`)) && PathPrefix(`/api/`)
      - traefik.http.services.backend.loadbalancer.server.port=5000
    ports:
     - "5000:5000"

  migration:
    <<: *backend
    container_name: tm-migration
    restart: on-failure
    command: flask db upgrade

  frontend:
    image: hotosm-tasking-manager:frontend
    container_name: tm-frontend
    restart: always
    networks:
      - tm-web
    ports:
     - "3000:80"
    labels:
      - traefik.http.routers.frontend.rule=Host(`127.0.0.1`) || Host(`localhost`)
      - traefik.http.services.frontend.loadbalancer.server.port=3000

  postgresql:
    image: postgis/postgis:14-3.3
    container_name: tm-postgresql
    restart: always
    env_file: ${ENV_FILE:-tasking-manager.env}
    networks:
      - tm-web
    volumes:
    - ../data/tm-db:/var/lib/postgresql/data

  # traefik:
  #   image: traefik:v2.10
  #   container_name: tm-traefik
  #   restart: always
  #   ports:
  #     - "880:80"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   command:
  #     - --entrypoints.web.address=:80
  #     - --providers.docker=true
  #   networks:
  #     - tm-web

networks:
  tm-web:
    external: false
